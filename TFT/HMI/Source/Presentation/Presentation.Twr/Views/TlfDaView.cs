//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.scsf.2007may/SCSF/html/02-09-010-ModelViewPresenter_MVP.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using System.Drawing;
using System.Diagnostics;
using System.Collections.Generic;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using Microsoft.Practices.CompositeUI;
using Microsoft.Practices.CompositeUI.EventBroker;
using HMI.Infrastructure.Interface;
using HMI.Model.Module.UI;
using HMI.Model.Module.Services;
using HMI.Model.Module.Messages;
using HMI.Model.Module.BusinessEntities;
using HMI.Presentation.Twr.Constants;
using HMI.Presentation.Twr.Properties;
using Utilities;
using NLog;
using System.Linq;

namespace HMI.Presentation.Twr.Views
{
	[SmartPart]
	public partial class TlfDaView : UserControl
	{
		private static Logger _Logger = LogManager.GetCurrentClassLogger();

		private IModelCmdManagerService _CmdManager;
		private StateManagerService _StateManager;
		private List<HMIButton> _TlfButtons = new List<HMIButton>();
		private List<HMIButton> _TlfButtonsConf = new List<HMIButton>();//230410
		private Dictionary<HMIButton, Color> _FastBlinkList;
		private Dictionary<HMIButton, Color> _SlowBlinkList;
		private bool _FastBlinkOn = true;
		private bool _SlowBlinkOn = true;
		private int _Page = 0;
		private int _NumPositionsByPage;
		private int FirstButtoConf=45;
		private int FirstPageConf=3;
		private int pageant = 0;
		public TlfDaView([ServiceDependency] IModelCmdManagerService cmdManager, [ServiceDependency] StateManagerService stateManager)
		{
			InitializeComponent();
			if (!VisualStyle.ModoNocturno)
			{

			}
			else
			{
				this._TlfDaTLP.BackColor = VisualStyle.ButtonColorN;//System.Drawing.Color.Black;
				this._TlfButtonsTLP.BackColor = VisualStyle.ButtonColorN;//System.Drawing.Color.Black;
				this._TlfDaTLP.ForeColor = VisualStyle.TextoTfColorN;// System.Drawing.Color.White;
				this._TlfButtonsTLP.ForeColor = VisualStyle.TextoTfColorN;// System.Drawing.Color.White;
				double scaleFactor = 0.7; // 70%

				Bitmap originalImage = global::HMI.Presentation.Twr.Properties.Resources.TlfPageNocturno;
				int newWidth = (int)(originalImage.Width * scaleFactor);
				int newHeight = (int)(originalImage.Height * scaleFactor);
				Bitmap resizedImage = new Bitmap(newWidth, newHeight);

				using (Graphics graphics = Graphics.FromImage(resizedImage))
				{
					graphics.DrawImage(originalImage, new Rectangle(0, 0, newWidth, newHeight));
				}

				this._TlfPageFirstBT.ImageNormal = resizedImage;
				this._TlfPageSecondBT.ImageNormal = resizedImage;
				this._TlfPageConfBT.ImageNormal = resizedImage;


			}
			if (global::HMI.Presentation.Twr.Properties.Settings.Default.BigFonts)
            {
                this._TlfButtonsTLP.Font = new System.Drawing.Font("Trebuchet MS", 10F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            }
            _CmdManager = cmdManager;
			_StateManager = stateManager;
			listaDEParticipantes1.setup(cmdManager, stateManager);
			_TlfButtonsTLP.RowCount = Settings.Default.TlfRows;
			_TlfButtonsTLP.RowStyles.Clear();

			for (int i = 0; i < _TlfButtonsTLP.RowCount; i++)
			{
				RowStyle st = new RowStyle(SizeType.Percent, 100);
				_TlfButtonsTLP.RowStyles.Add(st);
			}

			_TlfButtonsTLP.ColumnCount = Settings.Default.TlfColumns;
			_TlfButtonsTLP.ColumnStyles.Clear();

			_NumPositionsByPage = (_TlfButtonsTLP.RowCount * _TlfButtonsTLP.ColumnCount) - 1;
			FirstPageConf = 3;//Este define no esta en TWR Settings.Default. NumTelPages;
							  //230531 habria que sumarles las posible posiciones de AI
			int numposAI = 0;// 3;
			FirstButtoConf = FirstPageConf * _NumPositionsByPage + numposAI;

			for (int i = 0; i < _TlfButtonsTLP.ColumnCount; i++)
			{
				ColumnStyle st = new ColumnStyle(SizeType.Percent, 100);
				_TlfButtonsTLP.ColumnStyles.Add(st);
			}

			_NumPositionsByPage = (_TlfButtonsTLP.RowCount * _TlfButtonsTLP.ColumnCount) - 1;
			_FastBlinkList = new Dictionary<HMIButton, Color>();
			_SlowBlinkList = new Dictionary<HMIButton, Color>();

			for (int row = 0, pos = 0; row < _TlfButtonsTLP.RowCount; row++)
			{
				for (int column = 0; column < _TlfButtonsTLP.ColumnCount; column++, pos++)
				{
					HMIButton bt = new HMIButton();
					_TlfButtonsTLP.Controls.Add(bt, column, row);
					_TlfButtons.Add(bt);

					bt.Dock = DockStyle.Fill;
					bt.Name = "_TlfButton" + pos;
					bt.Visible = false;
					bt.IsButtonTlf = true;//incidencia 10970 teclas de telefonia
					
					bt.Id = pos == _NumPositionsByPage ? Tlf.IaMappedPosition : pos;

					bt.Click += TlfButton_Click;
					bt.LongClick += Bt_LongClick;
				}
			}


			_LcSpeakerUDB.Level = _StateManager.LcSpeaker.LevelLC;
			_TlfHeadPhonesUDB.Level = _StateManager.TlfHeadPhones.Level;
			_LcSpeakerUDB.Enabled = _StateManager.Tft.Enabled && _StateManager.Engine.Operative;
            _LcSpeakerUDB.DrawX = true;
			_TlfHeadPhonesUDB.Enabled = _StateManager.Tft.Enabled && _StateManager.Engine.Operative;
			_TlfPageFirstBT.Enabled = _StateManager.Tft.Enabled;
			_TlfPageSecondBT.Enabled = _StateManager.Tft.Enabled;

            // Si está habilitada la posibilidad de telefonía por altavoz
            // las imagenes de inicio de _TlfHeadPhonesUDB dependen del valor guardado
            if ((_StateManager.Tlf.AltavozTlfHabilitado && _StateManager.Tlf.AltavozTlfEstado) || _StateManager.Tlf.SoloAltavoces)
            {
                this._TlfHeadPhonesUDB.DownImage = global::HMI.Presentation.Twr.Properties.Resources.SpeakerDownTlf;
                this._TlfHeadPhonesUDB.UpImage = global::HMI.Presentation.Twr.Properties.Resources.SpeakerUpTlf;
                _TlfHeadPhonesUDB.Level = _StateManager.LcSpeaker.LevelTlf;
                _TlfHeadPhonesUDB.DrawX = true;
            }
		}

        private void Bt_LongClick(object sender, EventArgs e)
        {
			//
			//_CmdManager.RefrescaListaParticipantesEstado("1000");
			int id = ((HMIButton)sender).Id;
			if (esbotonconferencia(id))
			{
				string idconferencia = _StateManager.Tlf[id].Dst;
				//listaDEParticipantes1.SetIdConferencia(idconferencia);
				string sala = _CmdManager.GetSala(id - FirstButtoConf);
				listaDEParticipantes1.SetSala(sala);
				OcultaVisibiliza(id, sala, true);
			}

		}

		[EventSubscription(EventTopicNames.TftEnabledChanged, ThreadOption.Publisher)]
		[EventSubscription(EventTopicNames.EngineStateChanged, ThreadOption.Publisher)]
		public void OnTftEngineChanged(object sender, EventArgs e)
		{
            _Logger.Trace("TlfDAView.OnTftEngineChanged");
            _LcSpeakerUDB.Enabled = _StateManager.Tft.Enabled && _StateManager.Engine.Operative;
			_TlfHeadPhonesUDB.Enabled = _StateManager.Tft.Enabled && _StateManager.Engine.Operative;
			_TlfPageFirstBT.Enabled = _StateManager.Tft.Enabled;
			_TlfPageSecondBT.Enabled = _StateManager.Tft.Enabled;

			foreach (HMIButton bt in _TlfButtons)
			{
				bt.Enabled = TlfDstEnabled(_StateManager.Tlf[bt.Id]);
			}
			//borrar prueba para saber cuntos se quedan habilitados en la inicializacion.
			var enabledElements = _TlfButtons.Where(item => item.Enabled).ToList();
            HMIButton hmib = _TlfButtons[0];
			if (hmib.Height < 2)
				hmib.Height = 20;
        }

        [EventSubscription(EventTopicNames.ActiveViewChanging, ThreadOption.Publisher)]
		public void OnActiveViewChanging(object sender, EventArgs<string> e)
		{
			if (e.Data == ViewNames.TlfDa)
			{
				int page = _Page;
				int firstBtPage = int.Parse(_TlfPageFirstBT.Text) - 1;
				int secondBtPage = int.Parse(_TlfPageSecondBT.Text) - 1;

				TlfState pageState = _StateManager.Tlf.GetTlfState(_Page * _NumPositionsByPage, _NumPositionsByPage);
				TlfState firstBtPageState = _StateManager.Tlf.GetTlfState(firstBtPage * _NumPositionsByPage, _NumPositionsByPage);
				TlfState secondBtPageState = _StateManager.Tlf.GetTlfState(secondBtPage * _NumPositionsByPage, _NumPositionsByPage);

				if ((int)firstBtPageState > (int)pageState)
				{
					pageState = firstBtPageState;
					page = firstBtPage;
				}
				if ((int)secondBtPageState > (int)pageState)
				{
					page = secondBtPage;
				}

				if (page != _Page)
				{
					_CmdManager.TlfLoadDaPage(page);
				}
			}
		}

		[EventSubscription(EventTopicNames.LcSpeakerLevelChanged, ThreadOption.Publisher)]
		public void OnLcSpeakerLevelChanged(object sender, EventArgs e)
		{
			_LcSpeakerUDB.Level = _StateManager.LcSpeaker.LevelLC;
		}

        [EventSubscription(EventTopicNames.TlfSpeakerLevelChanged, ThreadOption.Publisher)]
        public void OnTlfSpeakerLevelChanged(object sender, EventArgs e)
        {
            _TlfHeadPhonesUDB.Level = _StateManager.LcSpeaker.LevelTlf;
        }
        
        [EventSubscription(EventTopicNames.TlfHeadPhonesLevelChanged, ThreadOption.Publisher)]
		public void OnTlfHeadPhonesLevelChanged(object sender, EventArgs e)
		{
			_TlfHeadPhonesUDB.Level = _StateManager.TlfHeadPhones.Level;
		}

		[EventSubscription(EventTopicNames.LoadTlfDaPageUI, ThreadOption.Publisher)]
		public void OnLoadTlfDaPage(object sender, PageMsg e)
		{
			if (ListaVisible())
				OcultaPaticipantes();
			if (_Page != e.Page)
			{
				Debug.Assert(e.Page < 4);

				_Page = e.Page;
				int absPageBegin = _Page * _NumPositionsByPage;

				if (_Page == 0)
				{
					_TlfPageFirstBT.Text = "2";
					_TlfPageSecondBT.Text = "3";
					_TlfPageConfBT.Text = "C";
				}
				else if (_Page == 1)
				{
					_TlfPageFirstBT.Text = "1";
					_TlfPageSecondBT.Text = "3";
					_TlfPageConfBT.Text = "C";
				}
				else if (_Page == 2)
				{
					_TlfPageFirstBT.Text = "1";
					_TlfPageSecondBT.Text = "2";
					_TlfPageConfBT.Text = "C";
				}
				else if (_Page== 3)
                {
					_TlfPageFirstBT.Text = "1";
					_TlfPageSecondBT.Text = "2";
					_TlfPageConfBT.Text = "3";

				}

				for (int i = 0; i < _NumPositionsByPage; i++)
				{
					HMIButton bt = _TlfButtons[i];
					TlfDst dst = _StateManager.Tlf[i + absPageBegin];

					Reset(bt, dst);
				}

				//230410
				// la pagina de conferencias es la ultima pagina.
				if (_Page == 3)
				{
					bool pageconf = Tlf.PagConferencia;
                    //LALM 230427
					int absConfBtPageBegin = _Page * _NumPositionsByPage;
                    for (int i = 0; i < _NumPositionsByPage; i++)
					{
						HMIButton bt = _TlfButtons[i];
						TlfDst dst = _StateManager.Tlf[i + absConfBtPageBegin];
						Reset(bt, dst);
					}
				}
				ResetBtPage(_TlfPageFirstBT);
				ResetBtPage(_TlfPageSecondBT);
				ResetBtPage(_TlfPageConfBT);
				if (_Page == 3)
					_StateManager.Tlf.pageconf = true;
				else
					_StateManager.Tlf.pageconf = false;
				bool ConfirmaPaginaConf = false;
				if (Tlf.PagConferencia)
				{
					int numpages = Tlf.NumDestinations / _NumPositionsByPage;
					int page = 3;// en asecna siempre es 9, en TWR 3
					int absConfBtPageBegin = page * _NumPositionsByPage;
					for (int i = 0; i < _NumPositionsByPage; i++)
					{
						HMIButton bt = _TlfButtons[i];
						TlfDst dst = _StateManager.Tlf[i + absConfBtPageBegin];
						if (dst?.Dst != "")
						{
							ConfirmaPaginaConf = true;
							break;
						}
					}
				}
				RedimensionaBotonesConferencia(ConfirmaPaginaConf);
            }
        }

		public void RedimensionaBotonesConferencia(bool conferencia)
		{
            int ancho = _TlfPageConfBT.Left + _TlfPageConfBT.Width - _TlfPageFirstBT.Left;
			int numb = 2;//numero de botones de paginas
			if(conferencia) { numb = 3; }
			int sepb = 5;//separacion botones;
			int sep = sepb * (numb - 1);//separacion total
			int anchob = (ancho - sep) / numb ;//ancho de cada boton
            int pos2 = _TlfPageFirstBT.Left + (anchob + sepb);//posicion segundo boton
            int pos3 = _TlfPageFirstBT.Left + 2*(anchob + sepb);//posicion tercer boton
																//230510
			listaDEParticipantes1.oculto = true;
			listaDEParticipantes1.Visible= false;
			if (conferencia)
			{
                _TlfPageConfBT.Visible = true;
                _TlfPageConfBT.Height = 53;

                _TlfPageFirstBT.Width = anchob;//36
                _TlfPageFirstBT.Height = 53;

                _TlfPageSecondBT.Width = anchob;//36
                _TlfPageSecondBT.Height = 53;
				_TlfPageSecondBT.Left = pos2;// 231;
			}
			else
			{
                _TlfPageConfBT.Visible = false;
                //_TlfPageConfBT.Height= 53;

                _TlfPageFirstBT.Height = 53;//33;
				_TlfPageFirstBT.Width = anchob;// 53;//33;

                _TlfPageSecondBT.Width = anchob;// 56; //36;
                _TlfPageSecondBT.Height = 53;//33;
				_TlfPageSecondBT.Left = pos2;// 251;//231;
            }

        }

		[EventSubscription(EventTopicNames.TlfChanged, ThreadOption.Publisher)]
		public void OnTlfChanged(object sender, RangeMsg e)
		{
			Debug.Assert(e.Count > 0);
			
			if ((e.From + e.Count) > Tlf.IaMappedPosition)
			{
				HMIButton bt = _TlfButtons[_NumPositionsByPage];
				TlfDst dst = _StateManager.Tlf[Tlf.IaMappedPosition];

				Reset(bt, dst);
			}
			
			//230526
			if ((e.From <FirstButtoConf)|| (e.From +e.Count<Tlf.IaMappedPosition))
			{
                //OcultaPaticipantes();
            }

			//230410 deberia ser tflconfchanged
			if ((e.From + e.Count) > Tlf.IaMappedPosition)
			{
				HMIButton bt = _TlfButtons[_NumPositionsByPage];
				TlfDst dst = _StateManager.Tlf[Tlf.IaMappedPosition];

				Reset(bt, dst);
			}

			if (e.From < Tlf.NumDestinations)
			{
				int absPageBegin = _Page * _NumPositionsByPage;
				int absFirstBtPageBegin = (int.Parse(_TlfPageFirstBT.Text) - 1) * _NumPositionsByPage;
                int absSecondBtPageBegin = (int.Parse(_TlfPageSecondBT.Text) - 1) * _NumPositionsByPage;
                int absThirdBtPageBegin = ((_TlfPageConfBT.Text == "3") ? 2: 3)*_NumPositionsByPage;

                // 230412 Estará en la última página, 
                //int absConfBtPageBegin = Tlf.NumDestinations- _NumPositionsByPage;
                //int numpages = Tlf.NumDestinations / _NumPositionsByPage;
				//LALM 230427
                //int numpages = 4;
                //int absConfBtPageBegin = numpages * _NumPositionsByPage - _NumPositionsByPage;
                //LALM 230427
                int absConfBtPageBegin = 3 * _NumPositionsByPage;
				int max = Math.Max(e.From, absPageBegin);
				int min = Math.Min(e.From + e.Count, absPageBegin + _NumPositionsByPage);
                for (int i = Math.Max(e.From, absPageBegin), to = Math.Min(e.From + e.Count, absPageBegin + _NumPositionsByPage); i < to; i++)
				{
					if (i >= absConfBtPageBegin)
					{
						HMIButton bt = _TlfButtons[i - absPageBegin];
						TlfDst dst = _StateManager.Tlf[i];
						if (dst.State == TlfState.Idle)
                        {
							listaDEParticipantes1.oculto = true;
							listaDEParticipantes1.Visible = false;
							OcultaPaticipantes();

						}
						else if (dst.State == TlfState.Set && dst.PrevState == TlfState.Out)
						{
                            string sala = _CmdManager.GetSala(i - FirstButtoConf);
							OcultaVisibiliza(i, sala);
						}
                        Reset(bt, dst);
					}
					else if (i < absConfBtPageBegin)
					{
						HMIButton bt = _TlfButtons[i % _NumPositionsByPage];
                        TlfDst dst = _StateManager.Tlf[i];
                        Reset(bt, dst);
                    }
                }

				if ((e.From < absFirstBtPageBegin + _NumPositionsByPage) && (e.From + e.Count > absFirstBtPageBegin))
				{
					ResetBtPage(_TlfPageFirstBT);
				}

                if ((e.From < absSecondBtPageBegin + _NumPositionsByPage) && (e.From + e.Count > absSecondBtPageBegin))
                {
                    ResetBtPage(_TlfPageSecondBT);
                }
				//230412 pagina de conferencias
                if ((e.From < absConfBtPageBegin + _NumPositionsByPage) && (e.From + e.Count > absConfBtPageBegin))
                {
                    ResetBtPage(_TlfPageConfBT);
                }
				//230417 el principio de la pagina de conferencias está por configuracion en la cuarta
				//
                else if (e.From + e.Count > absConfBtPageBegin)
				{
                    ResetBtPage(_TlfPageConfBT);
                }

				//prueba de cuenta de habilitados
				//var enabledElements = _TlfButtons.Where(item => item.Enabled).ToList();
			}
		}

		[EventSubscription(EventTopicNames.TlfPriorityChanged, ThreadOption.Publisher)]
		[EventSubscription(EventTopicNames.TlfListenChanged, ThreadOption.Publisher)]
		[EventSubscription(EventTopicNames.TlfTransferChanged, ThreadOption.Publisher)]
        [EventSubscription(EventTopicNames.TlfPickUpChanged, ThreadOption.Publisher)]
        [EventSubscription(EventTopicNames.TlfForwardChanged, ThreadOption.Publisher)]       
		public void OnFacilityChanged(object sender, EventArgs e)
		{
			int absPageBegin = _Page * _NumPositionsByPage;
            for (int i = 0; i < _NumPositionsByPage; i++)
			{
				HMIButton bt = _TlfButtons[i];
				TlfDst dst = _StateManager.Tlf[i + absPageBegin];

				Reset(bt, dst);

			}

			HMIButton mapBt = _TlfButtons[_NumPositionsByPage];
			TlfDst mapDst = _StateManager.Tlf[Tlf.IaMappedPosition];

			Reset(mapBt, mapDst);
		}

		//230516
		[EventSubscription(EventTopicNames.CambioConferenciaPreprogramada, ThreadOption.Publisher)]
		public void CambioConferenciaPreprogramada(object sender, StateMsg<ConfState> msg)
		{
			return;
		}


		/// <summary>
		/// Recibe evento para cambiar la telefonía por altavoz o por cascos.
		/// Se utiliza para cambiar la imagen del control de volumen, y poner el volumen adecuado
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		[EventSubscription(EventTopicNames.ChangeTlfSpeaker, ThreadOption.Publisher)]
        public void OnChangeTlfSpeaker(object sender, EventArgs<bool> e)
        {
            if (e.Data == true)
            {
                this._TlfHeadPhonesUDB.DownImage = global::HMI.Presentation.Twr.Properties.Resources.SpeakerDownTlf;
                this._TlfHeadPhonesUDB.UpImage = global::HMI.Presentation.Twr.Properties.Resources.SpeakerUpTlf;
                _TlfHeadPhonesUDB.Level = _StateManager.LcSpeaker.LevelTlf;
                _CmdManager.TlfSetSpeakerLevel(_StateManager.LcSpeaker.LevelTlf);
                _TlfHeadPhonesUDB.DrawX = !_StateManager.LcSpeaker.Presencia;
            }
            else
            {
                this._TlfHeadPhonesUDB.DownImage = global::HMI.Presentation.Twr.Properties.Resources.HeadPhonesDown;
                this._TlfHeadPhonesUDB.UpImage = global::HMI.Presentation.Twr.Properties.Resources.HeadPhonesUp;
                _TlfHeadPhonesUDB.Level = _StateManager.TlfHeadPhones.Level;
                _CmdManager.TlfSetHeadPhonesLevel(_StateManager.TlfHeadPhones.Level);
                //Los cascos no llevan aspas, no tienen visualizacion del control de presencia
                _TlfHeadPhonesUDB.DrawX = false;
            }
        }
        /// <summary>
        /// Este evento llega cuando hay un cambio en la presencia de un altavoz.
        /// Se utiliza para pintar aspas en su control de volumen 
        /// </summary>
        /// <param name="sender">no se usa</param>
        /// <param name="e">no se usa</param>
        [EventSubscription(EventTopicNames.SpeakerChanged, ThreadOption.Publisher)]
        public void OnSpeakerChanged(object sender,  EventArgs e)
        {
            if (sender.GetType() != typeof(LcSpeaker))
                return;
            if (_StateManager.LcSpeaker.Presencia == false)
            {
                _LcSpeakerUDB.DrawX = true;
                if (_StateManager.Tlf.AltavozTlfEstado)
                    _TlfHeadPhonesUDB.DrawX = true;
            }
            else
            {
                _LcSpeakerUDB.DrawX = false;
                if (_StateManager.Tlf.AltavozTlfEstado)
                    _TlfHeadPhonesUDB.DrawX = false;
            }
        }

		private bool TlfDstEnabled(TlfDst dst)
		{
			return (_StateManager.Tft.Enabled && _StateManager.Engine.Operative &&
					!dst.Unavailable && 
					(_StateManager.Tlf.Priority.State != FunctionState.Executing) &&
					((_StateManager.Tlf.Listen.State == FunctionState.Idle) || (_StateManager.Tlf.Listen.State == FunctionState.Ready)) &&
					((_StateManager.Tlf.Transfer.State == FunctionState.Idle) ||
					((_StateManager.Tlf.Transfer.State == FunctionState.Ready) &&
					((dst.State == TlfState.Idle) || (dst.State == TlfState.Hold) || (dst.State == TlfState.NotAllowed) ||
                    (dst.State == TlfState.Mem) || (dst.State == TlfState.RemoteMem)))) &&
                    (dst.State != TlfState.Inactive)) &&
                    //Hay destinos que no permiten ser llamados con prioridad (lineas PP)
                    //por eso se deshabilita su AD cuando se pulsa la tecla prioridad.
                    ((dst.PriorityAllowed) || (_StateManager.Tlf.Priority.State != FunctionState.Ready)) &&
                    //La escucha, y la Captura solo se permiten a Tops (puestos de operador internos)
                    //Durante la captura se admiten llamadas entrantes
                    ((dst.IsTop ||
                    ((_StateManager.Tlf.PickUp.State == FunctionState.Idle) || (dst.State == TlfState.In))) &&                   
                    //El desvío se permiten a tops y a punto a punto
                    (dst.ForwardAllowed ||
                    ((_StateManager.Tlf.Forward.State != FunctionState.Ready))));
		}

		private void Reset(HMIButton bt, TlfDst dst)
		{
			bt.Id = dst.Id;

			if (_FastBlinkList.Remove(bt) && (_FastBlinkList.Count == 0))
			{
				_FastBlinkTimer.Enabled = false;
				_FastBlinkOn = true;
			}
			if (_SlowBlinkList.Remove(bt) && (_SlowBlinkList.Count == 0))
			{
				_SlowBlinkTimer.Enabled = false;
				_SlowBlinkOn = true;
			}

			if (dst.IsConfigurated)
            {
                Color backColor = VisualStyle.ButtonColor;

                if (!dst.Unavailable)
                {
                    backColor = GetStateColor(bt, dst.State);
                }

                if (dst.Type == TlfType.Md)
                {
                    bt.Reset(dst.Dst, dst.Unavailable, backColor, Resources.group);
                }
                else
                    bt.Reset(dst.Dst, dst.Unavailable, backColor);
                bt.Enabled = TlfDstEnabled(dst);
                //Hay destinos que no permiten ser llamados con prioridad (lineas PP)
                //por eso se deshabilita su AD cuando se pulsa la tecla prioridad.
             }

			bt.Visible = dst.IsConfigurated;
		}

		private void ResetBtPage(HMIButton bt)
		{
			if (_FastBlinkList.Remove(bt) && (_FastBlinkList.Count == 0))
			{
				_FastBlinkTimer.Enabled = false;
				_FastBlinkOn = true;
			}
			if (_SlowBlinkList.Remove(bt) && (_SlowBlinkList.Count == 0))
			{
				_SlowBlinkTimer.Enabled = false;
				_SlowBlinkOn = true;
			}

			int page;
			TlfState st = TlfState.Idle;
			if (bt.Text.ToUpper() != "C")
			{
                _StateManager.Tlf.pageconf = false;
                // Cuando se pasa de pagina de conferencia a cualquier pagina se borran funciones activas
                if (pageant == 3)
				{
					_StateManager.Tlf.Priority.Reset();
					_StateManager.Tlf.Listen.Reset();
				}

                page = pageant = int.Parse(bt.Text) - 1;

				st = _StateManager.Tlf.GetTlfState(page * _NumPositionsByPage, _NumPositionsByPage);
			}
			else
			{
                // Cuando se pasa de pagina de AD a conferencia se borran funciones activas
                if (pageant != 3)
				{
                    _StateManager.Tlf.Priority.Reset();
                    _StateManager.Tlf.Listen.Reset();
                }

                page = pageant = 3;// en Asecna siempre es 9 es TWR 3
 
				st = _StateManager.Tlf.GetTlfState(page * _NumPositionsByPage, _NumPositionsByPage);
            }
            bt.ButtonColor = GetStateColor(bt, st);
		}

		private Color GetStateColor(HMIButton bt, TlfState st)
		{
			Color backColor = VisualStyle.ButtonColor;

			switch (st)
			{
                case TlfState.Idle:
                    break;
                case TlfState.PaPBusy:
                    //Do not change color
                    backColor = bt.ButtonColor;
 					break;
				case TlfState.In:
					backColor = _SlowBlinkOn ? VisualStyle.Colors.Orange : VisualStyle.ButtonColor;
					_SlowBlinkList[bt] = VisualStyle.Colors.Orange;
					_SlowBlinkTimer.Enabled = true;
					break;
				case TlfState.Out:
					if (!VisualStyle.ModoNocturno)
						backColor = VisualStyle.Colors.Blue;
					else
						backColor = VisualStyle.Color_TlfStateOut;
					break;
				case TlfState.Set:
				case TlfState.Conf:
				case TlfState.ConfPreprogramada:
					// backColor = VisualStyle.Colors.Green;
					// LALM 210204: En conversacion pongo el correspondiente configurado.
					backColor = VisualStyle.FondoColorConversacion;
					break;
				case TlfState.Busy:
				case TlfState.OutOfService:
					// backColor = VisualStyle.Colors.Red;
					// LALM 210204: en caso de fuera de servicio o bloqueo
					backColor = VisualStyle.FondoColorBloqueo;
					break;
				case TlfState.Mem:
					// LALM 210204: Cambio colores por nombre de estados.
					// backColor = VisualStyle.Colors.Orange;
					backColor = VisualStyle.FondoColorMemorizada;
					break;
				case TlfState.RemoteMem:
					// LALM 210204: Cambio colores por nombre de estados.
					// backColor = VisualStyle.Colors.DarkGray;
					backColor = VisualStyle.FondoColorRemoteMem;
					break;
				case TlfState.Hold:
				case TlfState.RemoteHold:
					// LALM 210204: Cambio colores por nombre de estados.
					// backColor = _SlowBlinkOn ? VisualStyle.Colors.Green : VisualStyle.ButtonColor;
					// _SlowBlinkList[bt] = VisualStyle.Colors.Green;
					backColor = _SlowBlinkOn ? VisualStyle.FondoColorHold : VisualStyle.ButtonColor;
					_SlowBlinkList[bt] = VisualStyle.FondoColorHold;
					_SlowBlinkTimer.Enabled = true;
					break;
				case TlfState.RemoteIn:
					// LALM 210204: Cambio colores por nombre de estados.
					// backColor = _SlowBlinkOn ? VisualStyle.Colors.DarkGray : VisualStyle.ButtonColor;
					// _SlowBlinkList[bt] = VisualStyle.Colors.DarkGray;
					backColor = _SlowBlinkOn ? VisualStyle.FondoColorRemoteIn : VisualStyle.ButtonColor;
					_SlowBlinkList[bt] = VisualStyle.FondoColorRemoteIn;
					_SlowBlinkTimer.Enabled = true;
					break;
				case TlfState.Congestion:
					// LALM 210204: Cambio colores por nombre de estados.
					// backColor = _SlowBlinkOn ? VisualStyle.Colors.Red : VisualStyle.ButtonColor;
					// _SlowBlinkList[bt] = VisualStyle.Colors.Red;
					backColor = _SlowBlinkOn ? VisualStyle.FondoColorCongestion : VisualStyle.ButtonColor;
					_SlowBlinkList[bt] = VisualStyle.FondoColorCongestion;
					_SlowBlinkTimer.Enabled = true;
					break;
				case TlfState.InPrio:
					// LALM 210204: Cambio colores por nombre de estados.
					backColor = _FastBlinkOn ? VisualStyle.FondoColorInPrio : VisualStyle.ButtonColor;
					_FastBlinkList[bt] = VisualStyle.FondoColorInPrio;
					_FastBlinkTimer.Enabled = true;
					break;
				case TlfState.NotAllowed:
					// LALM 210204: Cambio colores por nombre de estados.
					// backColor = _FastBlinkOn ? VisualStyle.Colors.Yellow : VisualStyle.ButtonColor;
					// _SlowBlinkList[bt] = VisualStyle.Colors.Yellow;
					backColor = _FastBlinkOn ? VisualStyle.FondoColorNotAllowed : VisualStyle.ButtonColor;
					_SlowBlinkList[bt] = VisualStyle.FondoColorNotAllowed;
					_SlowBlinkTimer.Enabled = true;
					break;
				case TlfState.InProcess:
					// LALM 210204: Cambio colores por nombre de estados.
					// backColor = VisualStyle.Colors.Yellow;
					backColor = VisualStyle.FondoColorInProcess;
					break;
				case TlfState.offhook://#2855 220713
					//backColor = VisualStyle.Colors.Yellow;
					backColor = VisualStyle.FondoColorInProcess;
					break;

			}

			return backColor;
		}

		private void _FastBlinkTimer_Tick(object sender, EventArgs e)
		{
			try
			{
				if (_FastBlinkTimer.Enabled)
				{
					_FastBlinkOn = !_FastBlinkOn;
					foreach (KeyValuePair<HMIButton, Color> p in _FastBlinkList)
					{
						p.Key.ButtonColor = _FastBlinkOn ? p.Value : VisualStyle.ButtonColor;
					}
				}
			}
			catch (Exception ex)
			{
				_Logger.Error("ERROR generando parpadeo rapido para teclas TlfAD", ex);
			}
		}

		private void _SlowBlinkTimer_Tick(object sender, EventArgs e)
		{
			try
			{
				if (_SlowBlinkTimer.Enabled)
				{
					_SlowBlinkOn = !_SlowBlinkOn;
					foreach (KeyValuePair<HMIButton, Color> p in _SlowBlinkList)
					{
						p.Key.ButtonColor = _SlowBlinkOn ? p.Value : VisualStyle.ButtonColor;
					}
				}
			}
			catch (Exception ex)
			{
				_Logger.Error("ERROR generando parpadeo lento para teclas TlfAD", ex);
			}
		}

		private void _LcSpeakerUDB_LevelDown(object sender, EventArgs e)
		{
			int level = _LcSpeakerUDB.Level - 1;

			try
			{
				_CmdManager.LcSetSpeakerLevel(level);
			}
			catch (Exception ex)
			{
				_Logger.Error("ERROR bajando el nivel del altavoz LC a " + level, ex);
			}
		}

		private void _LcSpeakerUDB_LevelUp(object sender, EventArgs e)
		{
			int level = _LcSpeakerUDB.Level + 1;

			try
			{
				_CmdManager.LcSetSpeakerLevel(level);
			}
			catch (Exception ex)
			{
				_Logger.Error("ERROR subiendo el nivel del altavoz LC a " + level, ex);
			}
		}

		private void _TlfHeadPhonesUDB_LevelDown(object sender, EventArgs e)
		{
			int level = _TlfHeadPhonesUDB.Level - 1;

			try
			{
                if (_StateManager.Tlf.AltavozTlfEstado)
                    _CmdManager.TlfSetSpeakerLevel(level);
                else
                    _CmdManager.TlfSetHeadPhonesLevel(level);
			}
			catch (Exception ex)
			{
				_Logger.Error("ERROR bajando el nivel de los microcascos TLF a " + level, ex);
			}
		}

		private void _TlfHeadPhonesUDB_LevelUp(object sender, EventArgs e)
		{

			int level = _TlfHeadPhonesUDB.Level + 1;

			try
			{
                if (_StateManager.Tlf.AltavozTlfEstado)
                    _CmdManager.TlfSetSpeakerLevel(level);
                else
				    _CmdManager.TlfSetHeadPhonesLevel(level);
			}
			catch (Exception ex)
			{
				_Logger.Error("ERROR subiendo el nivel de los microcascos TLF a " + level, ex);
			}
		}

		private void _TlfPageFirstBT_Click(object sender, EventArgs e)
		{
			int page = int.Parse(_TlfPageFirstBT.Text) - 1;

			try
			{
				_CmdManager.TlfLoadDaPage(page);
			}
			catch (Exception ex)
			{
				_Logger.Error("ERROR solicitando cambio de pagina TLF a " + page, ex);
			}
		}

		private void _TlfPageSecondBT_Click(object sender, EventArgs e)
		{
			int page = int.Parse(_TlfPageSecondBT.Text) - 1;

			try
			{
				_CmdManager.TlfLoadDaPage(page);
			}
			catch (Exception ex)
			{
				_Logger.Error("ERROR solicitando cambio de pagina TLF a " + page, ex);
			}
		}
		private bool esbotonconferencia(int id)
		{
			return true ? (id >= FirstButtoConf && id < Tlf.NumDestinations) : false;
		}

		/// <summary>
		/// 
		/// </summary>
		bool EsIzda(int numero) { return (numero + 3) % 4 < 2; }
		private void GetBotonesAd(int pag,out List<int>izda,out List <int>dcha)
        {
			/*List<int> */
			dcha = new List<int>();// { 47, 48, 51, 52, 55, 56, 59, };
			/*List<int> */
			izda = new List<int>();// { 45, 46, 49, 50, 53, 54, 57, 58, };
			int numero = FirstButtoConf;
			int mumero = pag * _NumPositionsByPage;
			int maxbuttonsdcha=(_TlfButtonsTLP.ColumnCount * _TlfButtonsTLP.RowCount) / 2 - 1;
			while (dcha.Count < maxbuttonsdcha)
			{
				if (EsIzda(numero))
					izda.Add(numero);
				else
					dcha.Add(numero);
				numero++;
			}
		}
		private void VisibilizaAD(int pag)
        {
			GetBotonesAd(3, out List<int> izda, out List<int> dcha);
			listaDEParticipantes1.oculto = true;
			foreach (HMIButton b in _TlfButtons)
			{
				if (dcha.Contains(b.Id) || izda.Contains(b.Id))
					b.Visible = true ? (_StateManager.Tlf[b.Id].Dst.Length > 0) : false;
			}
		}
		private void VisibilizaIzdaDcha()
		{
			bool lpvisible = listaDEParticipantes1.Visible;
			listaDEParticipantes1.oculto = true;
			VisibilizaAD(FirstPageConf);
		}

		private void RellenaListaIds(List<int> izda, List<int> dcha)
		{
			int numero = FirstButtoConf;
			while (dcha.Count < _NumPositionsByPage / 2 + 1)
			{
				if (EsIzda(numero))
					izda.Add(numero);
				else
					dcha.Add(numero);
				numero++;
			}
		}

		private void OcultaPaticipantes()
		{
			listaDEParticipantes1.oculto = true;
			List<int> dcha = new List<int>();// { 47, 48, 51, 52, 55, 56, 59, 60, };
			List<int> izda = new List<int>();// { 45, 46, 49, 50, 53, 54, 57, 58, };
			RellenaListaIds(izda, dcha);
			foreach (HMIButton b in _TlfButtons)
			{
				b.Visible = true ? (_StateManager.Tlf[b.Id].Dst.Length > 0) : false;
			}
		}


		//lalm230510
		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		/// <param name="sala"></param>
		/// <param name="pres_configuracion"></param>
		private void OcultaVisibiliza(int id, string sala, bool pres_configuracion = false)
		{
			bool lpvisible = listaDEParticipantes1.Visible;

			List<int> dcha = new List<int>();// { 47, 48, 51, 52, 55, 56, 59, 60, };
			List<int> izda = new List<int>();// { 45, 46, 49, 50, 53, 54, 57, 58, };
			int numero = FirstButtoConf;
			int maxbuttonsdcha = (_TlfButtonsTLP.ColumnCount * _TlfButtonsTLP.RowCount) / 2 - 1;
			while (dcha.Count < maxbuttonsdcha)
			{
				if (EsIzda(numero))
					izda.Add(numero);
				else
					dcha.Add(numero);
				numero++;
			}
			if (!dcha.Contains(id) && !izda.Contains(id))
			{
				listaDEParticipantes1.oculto = true;
				listaDEParticipantes1.Visible = false;
				return;
			}
			lpvisible = listaDEParticipantes1.Visible;
			listaDEParticipantes1.oculto = lpvisible;
			listaDEParticipantes1.Visible = false;
			//prueba solo para saber cuatos etan habilitados.
			//var enabledElements = _TlfButtons.Where(item => item.Enabled).ToList();
           
			foreach (HMIButton b in _TlfButtons)
			{
				if (izda.Contains(id))
				{
					if (dcha.Contains(b.Id))
						if (!lpvisible)
							b.Visible = false;
						else
							b.Visible = true ? (_StateManager.Tlf[b.Id].Dst.Length > 0) : false;
				}
				/*else*/
				if (dcha.Contains(id))
				{
					if (izda.Contains(b.Id))
					{
						if (!lpvisible)
							b.Visible = false;
						else
							b.Visible = true ? (_StateManager.Tlf[b.Id].Dst.Length > 0) :false;
					}
				}
			}
			if (!lpvisible)
			{
                int col = _TlfButtonsTLP.ColumnCount;
                int rows = _TlfButtonsTLP.RowCount;
                int coli = col / 2;
                int cold = col / 2; //col - col / 2;
                if (izda.Contains(id))
				{
					//listaDEParticipantes1.Size = new System.Drawing.Size(186, 427);
					//listaDEParticipantes1.Size = new System.Drawing.Size(150, 198);
                    listaDEParticipantes1.Size = new System.Drawing.Size(_TlfDaTLP.Bounds.Width * 2 / 3 - _TlfDaTLP.Bounds.Width / 40, _TlfDaTLP.Bounds.Height);
                    _TlfDaTLP.ColumnCount = col;
                    _TlfDaTLP.RowCount = rows;
                    TableLayoutPanelCellPosition tltcp = _TlfDaTLP.GetCellPosition(listaDEParticipantes1);
                    tltcp.Column = (col + 1) / 2;
                    tltcp.Row = 0;
                    _TlfDaTLP.SetCellPosition(listaDEParticipantes1, tltcp);
					_TlfDaTLP.SetColumnSpan(listaDEParticipantes1, cold);
					_TlfDaTLP.SetRowSpan(listaDEParticipantes1,rows);
					_TlfDaTLP.Update();
					listaDEParticipantes1.Visible = true;
					listaDEParticipantes1.SetConfiguracionTodos(pres_configuracion);
					listaDEParticipantes1.SetSala(sala);
				}
				else if (dcha.Contains(id))
				{
					TableLayoutPanelCellPosition tltcp = _TlfDaTLP.GetCellPosition(listaDEParticipantes1);
					tltcp.Column = 0;
					tltcp.Row = 0;
	
					_TlfDaTLP.SetCellPosition(listaDEParticipantes1, tltcp);
					_TlfDaTLP.SetColumnSpan(listaDEParticipantes1, coli);
					_TlfDaTLP.SetRowSpan(listaDEParticipantes1, rows);
					_TlfDaTLP.Update();
					listaDEParticipantes1.Visible = true;
					listaDEParticipantes1.SetConfiguracionTodos(pres_configuracion);
					listaDEParticipantes1.SetSala(sala);
				}

			}
			else
            {
				// fuerzo presentacion de lista de participantes.
				_CmdManager.RefrescaListaParticipantesConf(sala);
				if (!listaDEParticipantes1.oculto)
					listaDEParticipantes1.Visible = lpvisible; //230524 prueba y error.
				else
					listaDEParticipantes1.Visible = false; //230524 prueba y error.
			}
		}

		private bool AlgunOtroActivo(int id)
        {
			for (int i=0;i<15;i++)
            {
				if (i != id)
					if ((_StateManager.Tlf[i + FirstButtoConf].State == TlfState.Set)
						|| (_StateManager.Tlf[i + FirstButtoConf].State == TlfState.OutOfService)
						|| (_StateManager.Tlf[i + FirstButtoConf].State == TlfState.Congestion)
						|| (_StateManager.Tlf[i + FirstButtoConf].State == TlfState.Hold)
						|| (_StateManager.Tlf[i + FirstButtoConf].State == TlfState.Out)
						)
						return true;
					else if (_StateManager.Tlf[i + FirstButtoConf].State != TlfState.Idle)
						return true;
            }
			return false;
        }

		public bool ListaVisible()
		{
			if (listaDEParticipantes1.Visible && !listaDEParticipantes1.oculto)
				return true;
			return false;
		}

		bool HayActividadEnOtrasPaginas()
        {
			var rango1 = Enumerable.Range(0, FirstButtoConf);
			var rango2 = Enumerable.Range(Tlf.NumDestinations,  Tlf.NumIaDestinations);
			var rango3 = rango1.Concat(rango2);
			foreach (int id1 in rango3)
			{
				if (
					(_StateManager.Tlf[id1].State != TlfState.Idle) &&
					(_StateManager.Tlf[id1].State != TlfState.Unavailable)
					)
					return true;
			}
			return false;
		}
		private void TlfButton_Click(object sender, EventArgs e)
		{
			int id = ((HMIButton)sender).Id;
            if (false)// CAMBIO LA SEÑALIZACION A LA CONTESTACION DEL COMANDO.
            {
                if (esbotonconferencia(id))
				{
					string idconferencia = _StateManager.Tlf[id].Dst;
					//listaDEParticipantes1.SetIdConferencia(idconferencia);
					string sala = _CmdManager.GetSala(id - FirstButtoConf);
					listaDEParticipantes1.SetSala(sala);
					bool activo = AlgunOtroActivo(id - FirstButtoConf);
					bool visible = ListaVisible();

					if (!HayActividadEnOtrasPaginas())
					{
						if (_StateManager.Tlf[id].State == TlfState.Idle)
						{
							if (!activo || !visible)
								;// OcultaVisibiliza(id, sala);
						}
						else
						{
							if (visible)
								;// OcultaVisibiliza(id, sala);
						}
					}

					//if (activo && visible)
					//	;
					//else
					//{
					//	OcultaVisibiliza(id, sala);
					//}
				}
			}
			try
			{
				_CmdManager.TlfClick(id);
			}
			catch (Exception ex)
			{
				int pos = _TlfButtons.IndexOf((HMIButton)sender);
				string msg = string.Format("ERROR pulsando tecla TlfAD [Pos={0}] [Id={1}]", pos, id);
				_Logger.Error(msg, ex);
			}
		}


        private void _TlfPageConfBT_Click(object sender, EventArgs e)
        {
			int page = 3;
			if (_TlfPageConfBT.Text.ToUpper() == "C")
			{
				page = 3;
			}
			else
				page = int.Parse(_TlfPageConfBT.Text) - 1;

			try
			{
				_CmdManager.TlfLoadDaPage(page);
			}
			catch (Exception ex)
			{
				_Logger.Error("ERROR solicitando cambio de pagina TLF a " + page, ex);
			}
			if (page==3)
			{
                //230510 prueba a ver si carga
                //string sala = _CmdManager.GetSala(0);
                //_CmdManager.RefrescaListaParticipantesConf(sala);
            }
        }
		public class DialogForm : Form
		{
			public DialogForm()
			{
				// Configurar propiedades del formulario
				this.Text = "Diálogo Independiente";
				this.StartPosition = FormStartPosition.CenterScreen;
				this.FormBorderStyle = FormBorderStyle.FixedDialog;
				this.MaximizeBox = false;

				// Crear controles en el formulario
				Label label = new Label();
				label.Text = "Este es un diálogo independiente.";
				label.AutoSize = true;
				label.Location = new System.Drawing.Point(20, 20);

				Button button = new Button();
				button.Text = "Cerrar";
				button.Location = new System.Drawing.Point(100, 50);
				button.Click += (sender, e) => this.Close();

				// Agregar controles al formulario
				this.Controls.Add(label);
				this.Controls.Add(button);
	}
}



#if SELECCION_SONIDO_AD
		private void MainForm_MessageSent(object sender, MessageEventArgs e)
		{
			string mensaje = e.Message;
		}
		[EventSubscription(EventTopicNames.SeleccionSonido, ThreadOption.Publisher)]
		public void OnSeleccionSonido(object sender, EventArgs e)
		{
			if (false)
			{
				DialogForm dialogForm = new DialogForm();

				// Mostrar el formulario de diálogo de manera independiente
				dialogForm.Show();

				Console.WriteLine("La aplicación principal sigue ejecutándose.");

			}
			else
			{

				CSeleccionSonido dlg = new CSeleccionSonido();
				dlg.MessageSent += MainForm_MessageSent;
				dlg.setup(_CmdManager, _StateManager);
				dlg.Width = this.Width;
				dlg.Height = this.Height;
				dlg.Size = new Size(this.Width, this.Height);
				dlg.Location = new Point(700, 700/*this.Location.Y*/);
				dlg.Show();
				;// _RdPageBT_DownClick_Confirmada(sender);
			}
		}
#endif
	}
}

