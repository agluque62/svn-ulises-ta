//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.scsf.2007may/SCSF/html/02-09-010-ModelViewPresenter_MVP.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using System.Drawing;
using System.Diagnostics;
using System.Collections.Generic;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using Microsoft.Practices.CompositeUI;
using Microsoft.Practices.CompositeUI.EventBroker;
using HMI.Infrastructure.Interface;
using HMI.Model.Module.UI;
using HMI.Model.Module.Services;
using HMI.Model.Module.Messages;
using HMI.Model.Module.BusinessEntities;
using HMI.Presentation.Asecna.Constants;
using HMI.Presentation.Asecna.Properties;
using Utilities;
using NLog;
using System.Linq;

namespace HMI.Presentation.Asecna.Views
{
	[SmartPart]
	public partial class TlfDaView : UserControl
	{
		private static Logger _Logger = LogManager.GetCurrentClassLogger();

		private IModelCmdManagerService _CmdManager;
		private StateManagerService _StateManager;
		private List<HMIButton> _TlfButtons = new List<HMIButton>();
		private Dictionary<HMIButton, Color> _FastBlinkList;
		private Dictionary<HMIButton, Color> _SlowBlinkList;
		private bool _FastBlinkOn = true;
		private bool _SlowBlinkOn = true;
		private int _Page = 0;
		private int _NumPositionsByPage;
        //List to manage easily a variable number of pages
        private List<HMIButton> _TlfPageButtons = new List<HMIButton>();
		private int FirstButtoConf = 9 * 19;//45;
		private int FirstPageConf = 9;//3;
		private int pageant = 0;
		public TlfDaView([ServiceDependency] IModelCmdManagerService cmdManager, [ServiceDependency] StateManagerService stateManager)
		{
			InitializeComponent();

			_CmdManager = cmdManager;
			_StateManager = stateManager;
			listaDeParticipantes1.setup(cmdManager, stateManager);

			_TlfButtonsTLP.RowCount = Settings.Default.TlfRows;
			_TlfButtonsTLP.RowStyles.Clear();
			
			for (int i = 0; i < _TlfButtonsTLP.RowCount; i++)
			{
				RowStyle st = new RowStyle(SizeType.Percent, 100);
				_TlfButtonsTLP.RowStyles.Add(st);
			}

			_TlfButtonsTLP.ColumnCount = Settings.Default.TlfColumns;
			_TlfButtonsTLP.ColumnStyles.Clear();

			_NumPositionsByPage= (_TlfButtonsTLP.RowCount * _TlfButtonsTLP.ColumnCount) - 1;
			FirstPageConf = Settings.Default.NumTelPages;
			FirstButtoConf = FirstPageConf * _NumPositionsByPage;

			for (int i = 0; i < _TlfButtonsTLP.ColumnCount; i++)
			{
				ColumnStyle st = new ColumnStyle(SizeType.Percent, 100);
				_TlfButtonsTLP.ColumnStyles.Add(st);
			}

			_NumPositionsByPage = (_TlfButtonsTLP.RowCount * _TlfButtonsTLP.ColumnCount) - 1;
			_FastBlinkList = new Dictionary<HMIButton, Color>();
			_SlowBlinkList = new Dictionary<HMIButton, Color>();

			for (int row = 0, pos = 0; row < _TlfButtonsTLP.RowCount; row++)
			{
				for (int column = 0; column < _TlfButtonsTLP.ColumnCount; column++, pos++)
				{
					HMIButton bt = new HMIButton();
                    _TlfButtonsTLP.Controls.Add(bt, column, row);
					_TlfButtons.Add(bt);

					bt.Dock = DockStyle.Fill;
					bt.Name = "_TlfButton" + pos;
					bt.Visible = false;
					bt.Id = pos == _NumPositionsByPage ? Tlf.IaMappedPosition : pos;

					bt.Click += TlfButton_Click;
					bt.LongClick += Bt_LongClick;
				}
			}

			_LcSpeakerUDB.Level = _StateManager.LcSpeaker.LevelLC;
            _LcSpeakerUDB.DrawX = true;
			_TlfHeadPhonesUDB.Level = _StateManager.TlfHeadPhones.Level;
			_LcSpeakerUDB.Enabled = _StateManager.Tft.Enabled && _StateManager.Engine.Operative;
			_TlfHeadPhonesUDB.Enabled = _StateManager.Tft.Enabled && _StateManager.Engine.Operative;
            DrawConfigTelPages();
            // Si está habilitada la posibilidad de telefonía por altavoz
            // las imagenes de inicio de _TlfHeadPhonesUDB dependen del valor guardado
            if ((_StateManager.Tlf.AltavozTlfHabilitado && _StateManager.Tlf.AltavozTlfEstado) || _StateManager.Tlf.SoloAltavoces)
            {
                this._TlfHeadPhonesUDB.DownImage = global::HMI.Presentation.Asecna.Properties.Resources.SpeakerDownTlf;
                this._TlfHeadPhonesUDB.UpImage = global::HMI.Presentation.Asecna.Properties.Resources.SpeakerUpTlf;
                _TlfHeadPhonesUDB.Level = _StateManager.LcSpeaker.LevelTlf;
                _TlfHeadPhonesUDB.DrawX = true;
            }
        }

        private void DrawConfigTelPages()
        {
            //Minimun 1 page. Active page at init always first
            _TlfPageButtons.Add(_TlfPage1BT);
            if (Settings.Default.NumTelPages >= 2)
            {
                _TlfPageButtons.Add(_TlfPage2BT);
                _TlfPage2BT.Visible = true;
                _TlfPage2BT.Enabled = true;
            }
            if (Settings.Default.NumTelPages >= 3)
            {
                _TlfPageButtons.Add(_TlfPage3BT);
                _TlfPage3BT.Visible = true;
                _TlfPage3BT.Enabled = true;
            }
            if (Settings.Default.NumTelPages >= 4)
            {
                _TlfPageButtons.Add(_TlfPage4BT);
                _TlfPage4BT.Visible = true;
                _TlfPage4BT.Enabled = true;
            }
            if (Settings.Default.NumTelPages >= 5)
            {
                _TlfPageButtons.Add(_TlfPage5BT);
                _TlfPage5BT.Visible = true;
                _TlfPage5BT.Enabled = true;
            }
            if (Settings.Default.NumTelPages >= 6)
            {
                _TlfPageButtons.Add(_TlfPage6BT);
                _TlfPage6BT.Visible = true;
                _TlfPage6BT.Enabled = true;
            }
            if (Settings.Default.NumTelPages >= 7)
            {
                _TlfPageButtons.Add(_TlfPage7BT);
                _TlfPage7BT.Visible = true;
                _TlfPage7BT.Enabled = true;
            }
            if (Settings.Default.NumTelPages >= 8)
            {
                _TlfPageButtons.Add(_TlfPage8BT);
                _TlfPage8BT.Visible = true;
                _TlfPage8BT.Enabled = true;
            }
			if (Settings.Default.NumTelPages >= 9)
			{
				_TlfPageButtons.Add(_TlfPage9BT);
				_TlfPage9BT.Visible = true;
				_TlfPage9BT.Enabled = true;
			}
			if (Settings.Default.NumTelPages >= 9)
			{
				_TlfPageButtons.Add(_TlfPageCBT);
				_TlfPageCBT.Visible = true;
				_TlfPageCBT.Enabled = true;
			}
		}

		private void Bt_LongClick(object sender, EventArgs e)
		{
			//
			//_CmdManager.RefrescaListaParticipantesEstado("1000");
			int id = ((HMIButton)sender).Id;
			if (esbotonconferencia(id))
			{
				string idconferencia = _StateManager.Tlf[id].Dst;
				//listaDeParticipantes1.SetIdConferencia(idconferencia);
				string sala = _CmdManager.GetSala(id - FirstButtoConf);
				listaDeParticipantes1.SetSala(sala);
				OcultaVisibiliza(id, sala, true);
			}

		}


		[EventSubscription(EventTopicNames.TftEnabledChanged, ThreadOption.Publisher)]
		[EventSubscription(EventTopicNames.EngineStateChanged, ThreadOption.Publisher)]
		public void OnTftEngineChanged(object sender, EventArgs e)
		{
			_LcSpeakerUDB.Enabled = _StateManager.Tft.Enabled && _StateManager.Engine.Operative;
			_TlfHeadPhonesUDB.Enabled = _StateManager.Tft.Enabled && _StateManager.Engine.Operative;

			foreach (HMIButton bt in _TlfButtons)
			{
				bt.Enabled = TlfDstEnabled(_StateManager.Tlf[bt.Id]);
			}
		}

		[EventSubscription(EventTopicNames.ActiveViewChanging, ThreadOption.Publisher)]
		public void OnActiveViewChanging(object sender, EventArgs<string> e)
		{
			if (e.Data == ViewNames.TlfDa)
			{
				int page = _Page;
				int firstBtPage = int.Parse(_TlfPage2BT.Text) - 1;
				int secondBtPage = int.Parse(_TlfPage3BT.Text) - 1;

				TlfState pageState = _StateManager.Tlf.GetTlfState(_Page * _NumPositionsByPage, _NumPositionsByPage);
				TlfState firstBtPageState = _StateManager.Tlf.GetTlfState(firstBtPage * _NumPositionsByPage, _NumPositionsByPage);
				TlfState secondBtPageState = _StateManager.Tlf.GetTlfState(secondBtPage * _NumPositionsByPage, _NumPositionsByPage);

				if ((int)firstBtPageState > (int)pageState)
				{
					pageState = firstBtPageState;
					page = firstBtPage;
				}
				if ((int)secondBtPageState > (int)pageState)
				{
					page = secondBtPage;
				}

				if (page != _Page)
				{
					_CmdManager.TlfLoadDaPage(page);
				}
			}
		}

		public void RedimensionaBotonesConferencia(bool conferencia)
		{
			if (conferencia)
			{
				_TlfPageCBT.Visible = true;
			}
			else
			{
				_TlfPageCBT.Visible = false;
			}
		}

		[EventSubscription(EventTopicNames.LcSpeakerLevelChanged, ThreadOption.Publisher)]
		public void OnLcSpeakerLevelChanged(object sender, EventArgs e)
		{
			_LcSpeakerUDB.Level = _StateManager.LcSpeaker.LevelLC;
		}

		[EventSubscription(EventTopicNames.TlfHeadPhonesLevelChanged, ThreadOption.Publisher)]
		public void OnTlfHeadPhonesLevelChanged(object sender, EventArgs e)
		{
			_TlfHeadPhonesUDB.Level = _StateManager.TlfHeadPhones.Level;
		}

		[EventSubscription(EventTopicNames.LoadTlfDaPageUI, ThreadOption.Publisher)]
		public void OnLoadTlfDaPage(object sender, PageMsg e)
		{
			if (ListaVisible())
				OcultaPaticipantes();
			if (_Page != e.Page)
			{
				Debug.Assert(e.Page < Settings.Default.NumTelPages+1);//230522

				_Page = e.Page;
				int absPageBegin = _Page * _NumPositionsByPage;

                foreach (HMIButton page in _TlfPageButtons)
                {
                    page.Enabled = true;
                }

				for (int i = 0; i < _NumPositionsByPage; i++)
				{
                    // La página 9 sólo tiene 18 posiciones de AD
                    if (_Page == 8 && i == 18)
                        continue;

                    HMIButton bt = _TlfButtons[i];
                    TlfDst dst = _StateManager.Tlf[i + absPageBegin];

                    Reset(bt, dst);
				}

                switch (_Page)
                {
                    case 0:
                        _TlfPage1BT.Enabled = false;
                        ResetBtPage(_TlfPage1BT);
                        break;
                    case 1:
                        _TlfPage2BT.Enabled = false;
                        ResetBtPage(_TlfPage2BT);
                        break;
                    case 2:
                        _TlfPage3BT.Enabled = false;
                        ResetBtPage(_TlfPage3BT);
                        break;
                    case 3:
                        _TlfPage4BT.Enabled = false;
                        ResetBtPage(_TlfPage4BT);
                        break;
                    case 4:
                        _TlfPage5BT.Enabled = false;
                        ResetBtPage(_TlfPage5BT);
                        break;
                    case 5:
                        _TlfPage6BT.Enabled = false;
                        ResetBtPage(_TlfPage6BT);
                        break;
                    case 6:
                        _TlfPage7BT.Enabled = false;
                        ResetBtPage(_TlfPage7BT);
                        break;
                    case 7:
                        _TlfPage8BT.Enabled = false;
                        ResetBtPage(_TlfPage8BT);
                        break;
                    case 8:
                        _TlfPage9BT.Enabled = false;
                        ResetBtPage(_TlfPage9BT);
                        break;
					case 9:
						_TlfPageCBT.Enabled = false;
						ResetBtPage(_TlfPageCBT);
						break;
				}
				bool ConfirmaPaginaConf = false;
				if (Tlf.PagConferencia)
				{
					
					int numpages = Tlf.NumDestinations / _NumPositionsByPage;
					int page = 9;// en asecna siempre es 9, en TWR 3
					int absConfBtPageBegin = page * _NumPositionsByPage;
					for (int i = 0; i < _NumPositionsByPage; i++)
					{
						HMIButton bt = _TlfButtons[i];
						TlfDst dst = _StateManager.Tlf[i + absConfBtPageBegin];
						if (dst?.Dst != "")
						{
							ConfirmaPaginaConf = true;
							break;
						}
					}
				}
				RedimensionaBotonesConferencia(ConfirmaPaginaConf);
			}
		}

		[EventSubscription(EventTopicNames.TlfChanged, ThreadOption.Publisher)]
		public void OnTlfChanged(object sender, RangeMsg e)
		{
			Debug.Assert(e.Count > 0);

			if ((e.From + e.Count) > Tlf.IaMappedPosition)
			{
				HMIButton bt = _TlfButtons[_NumPositionsByPage];
				TlfDst dst = _StateManager.Tlf[Tlf.IaMappedPosition];

				Reset(bt, dst);
			}

			if (e.From < Tlf.NumDestinations)
			{
				int absPageBegin = _Page * _NumPositionsByPage;
				int absFirstBtPageBegin = (int.Parse(_TlfPage2BT.Text) - 1) * _NumPositionsByPage;
				int absSecondBtPageBegin = (int.Parse(_TlfPage3BT.Text) - 1) * _NumPositionsByPage;

				for (int i = Math.Max(e.From, absPageBegin), to = Math.Min(e.From + e.Count, absPageBegin + _NumPositionsByPage); i < to; i++)
				{
					HMIButton bt = _TlfButtons[i - absPageBegin];
					TlfDst dst = _StateManager.Tlf[i];

					Reset(bt, dst);
                }

                int pageButtonToReset = (int)(e.From / _NumPositionsByPage);
                switch (pageButtonToReset)
                {
                    case 0:
                        ResetBtPage(_TlfPage1BT);
                        break;
                    case 1:
                        ResetBtPage(_TlfPage2BT);
                        break;
                    case 2:
                        ResetBtPage(_TlfPage3BT);
                        break;
                    case 3:
                        ResetBtPage(_TlfPage4BT);
                        break;
                    case 4:
                        ResetBtPage(_TlfPage5BT);
                        break;
                    case 5:
                        ResetBtPage(_TlfPage6BT);
                        break;
                    case 6:
                        ResetBtPage(_TlfPage7BT);
                        break;
                    case 7:
                        ResetBtPage(_TlfPage8BT);
                        break;
					case 8:
						ResetBtPage(_TlfPage9BT);
						break;
					case 9:
						ResetBtPage(_TlfPageCBT);
						break;
				}
			}
		}

		[EventSubscription(EventTopicNames.TlfPriorityChanged, ThreadOption.Publisher)]
		[EventSubscription(EventTopicNames.TlfListenChanged, ThreadOption.Publisher)]
		[EventSubscription(EventTopicNames.TlfTransferChanged, ThreadOption.Publisher)]
		public void OnFacilityChanged(object sender, EventArgs e)
		{
			int absPageBegin = _Page * _NumPositionsByPage;

			for (int i = 0; i < _NumPositionsByPage; i++)
			{
				HMIButton bt = _TlfButtons[i];
				TlfDst dst = _StateManager.Tlf[i + absPageBegin];

				Reset(bt, dst);
			}

			HMIButton mapBt = _TlfButtons[_NumPositionsByPage];
			TlfDst mapDst = _StateManager.Tlf[Tlf.IaMappedPosition];

			Reset(mapBt, mapDst);
		}

        /// <summary>
        /// Este evento llega cuando hay un cambio en la presencia de un altavoz.
        /// Se utiliza para pintar aspas en su control de volumen 
        /// </summary>
        /// <param name="sender">no se usa</param>
        /// <param name="e">no se usa</param>
        [EventSubscription(EventTopicNames.SpeakerChanged, ThreadOption.Publisher)]
        public void OnSpeakerChanged(object sender, EventArgs e)
        {
            if (sender.GetType() != typeof(LcSpeaker))
                return;
            if (_StateManager.LcSpeaker.Presencia == false)
            {
                _LcSpeakerUDB.DrawX = true;
                if (_StateManager.Tlf.AltavozTlfEstado)
                    _TlfHeadPhonesUDB.DrawX = true;
            }
            else
            {
                _LcSpeakerUDB.DrawX = false;
                if (_StateManager.Tlf.AltavozTlfEstado)
                    _TlfHeadPhonesUDB.DrawX = false;
            }
        }

		private bool TlfDstEnabled(TlfDst dst)
		{
			return _StateManager.Tft.Enabled && _StateManager.Engine.Operative &&
					!dst.Unavailable && 
					(_StateManager.Tlf.Priority.State != FunctionState.Error) &&
					((_StateManager.Tlf.Listen.State == FunctionState.Idle) || (_StateManager.Tlf.Listen.State == FunctionState.Ready)) &&
					((_StateManager.Tlf.Transfer.State == FunctionState.Idle) ||
					((_StateManager.Tlf.Transfer.State == FunctionState.Ready) &&
					((dst.State == TlfState.Idle) || (dst.State == TlfState.Hold) || (dst.State == TlfState.NotAllowed) ||
					(dst.State == TlfState.Mem) || (dst.State == TlfState.RemoteMem))));
		}

		private void Reset(HMIButton bt, TlfDst dst)
		{
			bt.Id = dst.Id;

			if (_FastBlinkList.Remove(bt) && (_FastBlinkList.Count == 0))
			{
				_FastBlinkTimer.Enabled = false;
				_FastBlinkOn = true;
			}
			if (_SlowBlinkList.Remove(bt) && (_SlowBlinkList.Count == 0))
			{
				_SlowBlinkTimer.Enabled = false;
				_SlowBlinkOn = true;
			}

			if (dst.IsConfigurated)
			{
				Color backColor = VisualStyle.ButtonColor;

				if (!dst.Unavailable)
				{
					backColor = GetStateColor(bt, dst.State);
				}

				bt.Reset(dst.Dst, dst.Unavailable, backColor);
				bt.Enabled = TlfDstEnabled(dst);
			}

			bt.Visible = dst.IsConfigurated;
		}

        private void ResetBtPage(HMIButton bt, TlfState st)
        {
            if (_FastBlinkList.Remove(bt) && (_FastBlinkList.Count == 0))
            {
                _FastBlinkTimer.Enabled = false;
                _FastBlinkOn = true;
            }
            if (_SlowBlinkList.Remove(bt) && (_SlowBlinkList.Count == 0))
            {
                _SlowBlinkTimer.Enabled = false;
                _SlowBlinkOn = true;
            }

            bt.ButtonColor = GetStateColor(bt, st);
        }

		private void ResetBtPage(HMIButton bt)
		{
			if (_FastBlinkList.Remove(bt) && (_FastBlinkList.Count == 0))
			{
				_FastBlinkTimer.Enabled = false;
				_FastBlinkOn = true;
			}
			if (_SlowBlinkList.Remove(bt) && (_SlowBlinkList.Count == 0))
			{
				_SlowBlinkTimer.Enabled = false;
				_SlowBlinkOn = true;
			}

			int page;
			TlfState st = TlfState.Idle;
			if (bt.Text.ToUpper() != "C")
			{
                _StateManager.Tlf.pageconf = false;
                // Cuando se pasa de pagina de conferencia a un pagina de AD se borran funciones activas
                if (pageant == 9)
				{
					_StateManager.Tlf.Priority.Reset();
					_StateManager.Tlf.Listen.Reset();
				}

                page = pageant = int.Parse(bt.Text) - 1;
				st = _StateManager.Tlf.GetTlfState(page * _NumPositionsByPage, _NumPositionsByPage);
			}
			else
			{
				_StateManager.Tlf.pageconf = true;
                // Cuando se pasa de pagina de AD a conferencia se borran funciones activas
                if (pageant != 9)
				{
					_StateManager.Tlf.Priority.Reset();
					_StateManager.Tlf.Listen.Reset();
				}
                page = pageant = 9;// en asecna siempre es 9, en TWR 3
				
				st = _StateManager.Tlf.GetTlfState(page * _NumPositionsByPage, _NumPositionsByPage);
			}
			bt.ButtonColor = GetStateColor(bt, st);
		}

		private Color GetStateColor(HMIButton bt, TlfState st)
		{
			Color backColor = VisualStyle.ButtonColor;

			switch (st)
			{
				case TlfState.Idle:
                    break;
				case TlfState.PaPBusy:
					backColor = VisualStyle.Colors.Red;
					break;
				case TlfState.In:
					backColor = _SlowBlinkOn ? VisualStyle.Colors.Orange : VisualStyle.ButtonColor;
					_SlowBlinkList[bt] = VisualStyle.Colors.Orange;
					_SlowBlinkTimer.Enabled = true;
					break;
				case TlfState.Out:
					backColor = VisualStyle.Colors.Blue;
					break;
				case TlfState.Set:
                case TlfState.Conf:
                case TlfState.ConfPreprogramada:
                    backColor = VisualStyle.Colors.Green;
					break;
				case TlfState.Busy:
				case TlfState.OutOfService:
					backColor = VisualStyle.Colors.Red;
					break;
				case TlfState.Mem:
					backColor = VisualStyle.Colors.Orange;
					break;
				case TlfState.RemoteMem:
					backColor = VisualStyle.Colors.DarkGray;
					break;
				case TlfState.Hold:
				case TlfState.RemoteHold:
					backColor = _SlowBlinkOn ? VisualStyle.Colors.Green : VisualStyle.ButtonColor;
					_SlowBlinkList[bt] = VisualStyle.Colors.Green;
					_SlowBlinkTimer.Enabled = true;
					break;
				case TlfState.RemoteIn:
					backColor = _SlowBlinkOn ? VisualStyle.Colors.DarkGray : VisualStyle.ButtonColor;
					_SlowBlinkList[bt] = VisualStyle.Colors.DarkGray;
					_SlowBlinkTimer.Enabled = true;
					break;
				case TlfState.Congestion:
					backColor = _SlowBlinkOn ? VisualStyle.Colors.Red : VisualStyle.ButtonColor;
					_SlowBlinkList[bt] = VisualStyle.Colors.Red;
					_SlowBlinkTimer.Enabled = true;
					break;
				case TlfState.InPrio:
					backColor = _FastBlinkOn ? VisualStyle.Colors.Orange : VisualStyle.ButtonColor;
					_FastBlinkList[bt] = VisualStyle.Colors.Orange;
					_FastBlinkTimer.Enabled = true;
					break;
				case TlfState.NotAllowed:
					backColor = _FastBlinkOn ? VisualStyle.Colors.Yellow : VisualStyle.ButtonColor;
					_SlowBlinkList[bt] = VisualStyle.Colors.Yellow;
					_SlowBlinkTimer.Enabled = true;
					break;
			}

			return backColor;
		}

		private void _FastBlinkTimer_Tick(object sender, EventArgs e)
		{
			try
			{
				if (_FastBlinkTimer.Enabled)
				{
					_FastBlinkOn = !_FastBlinkOn;
					foreach (KeyValuePair<HMIButton, Color> p in _FastBlinkList)
					{
						p.Key.ButtonColor = _FastBlinkOn ? p.Value : VisualStyle.ButtonColor;
					}
				}
			}
			catch (Exception ex)
			{
				_Logger.Error("ERROR generando parpadeo rapido para teclas TlfAD", ex);
			}
		}

		private void _SlowBlinkTimer_Tick(object sender, EventArgs e)
		{
			try
			{
				if (_SlowBlinkTimer.Enabled)
				{
					_SlowBlinkOn = !_SlowBlinkOn;
					foreach (KeyValuePair<HMIButton, Color> p in _SlowBlinkList)
					{
						p.Key.ButtonColor = _SlowBlinkOn ? p.Value : VisualStyle.ButtonColor;
					}
				}
			}
			catch (Exception ex)
			{
				_Logger.Error("ERROR generando parpadeo lento para teclas TlfAD", ex);
			}
		}

		private void _LcSpeakerUDB_LevelDown(object sender, EventArgs e)
		{
			int level = _LcSpeakerUDB.Level - 1;

			try
			{
				_CmdManager.LcSetSpeakerLevel(level);
			}
			catch (Exception ex)
			{
				_Logger.Error("ERROR bajando el nivel del altavoz LC a " + level, ex);
			}
		}

		private void _LcSpeakerUDB_LevelUp(object sender, EventArgs e)
		{
			int level = _LcSpeakerUDB.Level + 1;

			try
			{
				_CmdManager.LcSetSpeakerLevel(level);
			}
			catch (Exception ex)
			{
				_Logger.Error("ERROR subiendo el nivel del altavoz LC a " + level, ex);
			}
		}

		private void _TlfHeadPhonesUDB_LevelDown(object sender, EventArgs e)
		{
			int level = _TlfHeadPhonesUDB.Level - 1;

			try
			{
				_CmdManager.TlfSetHeadPhonesLevel(level);
			}
			catch (Exception ex)
			{
				_Logger.Error("ERROR bajando el nivel de los microcascos TLF a " + level, ex);
			}
		}

		private void _TlfHeadPhonesUDB_LevelUp(object sender, EventArgs e)
		{
			int level = _TlfHeadPhonesUDB.Level + 1;

			try
			{
				_CmdManager.TlfSetHeadPhonesLevel(level);
			}
			catch (Exception ex)
			{
				_Logger.Error("ERROR subiendo el nivel de los microcascos TLF a " + level, ex);
			}
		}
		
		private void _TlfPageBT_Click(object sender, EventArgs e)
        {
            int page = int.Parse(((HMI.Model.Module.UI.HMIButton)sender).Text) - 1;

            try
            {
                _CmdManager.TlfLoadDaPage(page);
            }
            catch (Exception ex)
            {
                _Logger.Error("ERROR solicitando cambio de pagina TLF a " + page, ex);
            }
        }
		private void _TlfPageCBT_Click(object sender, EventArgs e)
		{
			int page = 9;// int.Parse(((HMI.Model.Module.UI.HMIButton)sender).Text) - 1;

			try
			{
				_CmdManager.TlfLoadDaPage(page);
			}
			catch (Exception ex)
			{
				_Logger.Error("ERROR solicitando cambio de pagina TLF a " + page, ex);
			}

		}

		private bool esbotonconferencia(int id)
		{
			
            return true ? (id >= FirstButtoConf && id < Tlf.NumDestinations) :
                _TlfButtons[id].IsConferencePreprogramada;
		}

		private bool AlgunOtroActivo(int id)
		{
			for (int i = 0; i < _NumPositionsByPage; i++)
			{
				if (i != id)
					if ((_StateManager.Tlf[i + FirstButtoConf].State == TlfState.Set)
						|| (_StateManager.Tlf[i + FirstButtoConf].State == TlfState.OutOfService)
						|| (_StateManager.Tlf[i + FirstButtoConf].State == TlfState.Congestion)
						|| (_StateManager.Tlf[i + FirstButtoConf].State == TlfState.Hold)
						|| (_StateManager.Tlf[i + FirstButtoConf].State == TlfState.Out)
						)
						return true;
					else if (_StateManager.Tlf[i + FirstButtoConf].State != TlfState.Idle)
						return true;
			}
			return false;
		}

		public bool ListaVisible()
		{
			if (listaDeParticipantes1.Visible && !listaDeParticipantes1.oculto)
				return true;
			return false;
		}
		
		bool EsIzda(int numero) 
		{
			int col= _TlfButtonsTLP.ColumnCount;
			numero %= col;
			return (numero + col-1) % col < col/2; 
		}
		private void GetBotonesAd(int pag, out List<int> izda, out List<int> dcha)
		{
			/*List<int> */
			dcha = new List<int>();// { 47, 48, 51, 52, 55, 56, 59, 60, };
			/*List<int> */
			izda = new List<int>();// { 45, 46, 49, 50, 53, 54, 57, 58, };
			int numero = FirstButtoConf;
			int mumero = pag * _NumPositionsByPage;
			while (dcha.Count < 8)
			{
				if (EsIzda(numero))
					izda.Add(numero);
				else
					dcha.Add(numero);
				numero++;
			}
		}
		private void RellenaListaIds(List<int> izda,List<int>dcha)
        {
			int numero = FirstButtoConf;
			while (dcha.Count < _NumPositionsByPage / 2 + 1)
			{
				if (EsIzda(numero))
					izda.Add(numero);
				else
					dcha.Add(numero);
				numero++;
			}
		}
		private void OcultaPaticipantes()
		{
			listaDeParticipantes1.oculto = true;
			List<int> dcha = new List<int>();// { 47, 48, 51, 52, 55, 56, 59, 60, };
			List<int> izda = new List<int>();// { 45, 46, 49, 50, 53, 54, 57, 58, };
			RellenaListaIds(izda, dcha);
			//int numero = FirstButtoConf;
			//while (dcha.Count < _NumPositionsByPage / 2 + 1)
			//{
			//	if (EsIzda(numero))
			//		izda.Add(numero);
			//	else
			//		dcha.Add(numero);
			//	numero++;
			//}
			foreach (HMIButton b in _TlfButtons)
			{
					b.Visible = true ? (_StateManager.Tlf[b.Id].Dst.Length > 0) : false;
			}
		}

		private void OcultaVisibiliza(int id, string sala, bool pres_configuracion = false)
		{
			bool lpvisible = listaDeParticipantes1.Visible;

			List<int> dcha = new List<int>();// { 47, 48, 51, 52, 55, 56, 59, 60, };
			List<int> izda = new List<int>();// { 45, 46, 49, 50, 53, 54, 57, 58, };
			RellenaListaIds(izda, dcha);
			if (!dcha.Contains(id) && !izda.Contains(id))
			{
				listaDeParticipantes1.oculto = true;
				listaDeParticipantes1.Visible = false;
				return;
			}
			lpvisible = listaDeParticipantes1.Visible;
			listaDeParticipantes1.oculto = lpvisible;
			listaDeParticipantes1.Visible = false;
			foreach (HMIButton b in _TlfButtons)
			{
				if (izda.Contains(id))
				{
					if (dcha.Contains(b.Id))
						if (!lpvisible)
							b.Visible = false;
						else
							b.Visible = true ? (_StateManager.Tlf[b.Id].Dst.Length > 0) : false;
				}
				else if (dcha.Contains(id))
				{
					if (izda.Contains(b.Id))
					{
						if (!lpvisible)
							b.Visible = false;
						else
							b.Visible = true ? (_StateManager.Tlf[b.Id].Dst.Length > 0) : false;
					}
				}
			}
			if (!lpvisible)
			{
				int col = _TlfButtonsTLP.ColumnCount;
				int rows = _TlfButtonsTLP.RowCount;
				int coli = col / 2;
				int cold = col / 2; //col - col / 2;
				if (izda.Contains(id))
				{
					listaDeParticipantes1.Size = new System.Drawing.Size(_TlfDaTLP.Bounds.Width *2/3- _TlfDaTLP.Bounds.Width/40, _TlfDaTLP.Bounds.Height);
					_TlfDaTLP.ColumnCount = col;
					_TlfDaTLP.RowCount = rows;
					TableLayoutPanelCellPosition tltcp = _TlfDaTLP.GetCellPosition(listaDeParticipantes1);
					tltcp.Column = (col+1)/2;
					tltcp.Row = 0;
					_TlfDaTLP.SetCellPosition(listaDeParticipantes1, tltcp);
					_TlfDaTLP.SetColumnSpan(listaDeParticipantes1, cold);
					_TlfDaTLP.SetRowSpan(listaDeParticipantes1, rows);
					_TlfDaTLP.Update();
					listaDeParticipantes1.Visible = true;
					listaDeParticipantes1.SetConfiguracionTodos(pres_configuracion);
					listaDeParticipantes1.SetSala(sala);
				}
				else if (dcha.Contains(id))
				{
					TableLayoutPanelCellPosition tltcp = _TlfDaTLP.GetCellPosition(listaDeParticipantes1);
					tltcp.Column = 0;
					tltcp.Row = 0;

					_TlfDaTLP.SetCellPosition(listaDeParticipantes1, tltcp);
					_TlfDaTLP.SetColumnSpan(listaDeParticipantes1, coli);
					_TlfDaTLP.SetRowSpan(listaDeParticipantes1, rows);
					_TlfDaTLP.Update();
					listaDeParticipantes1.Visible = true;
					listaDeParticipantes1.SetConfiguracionTodos(pres_configuracion);
					listaDeParticipantes1.SetSala(sala);
				}

			}
			else
			{
				// fuerzo presentacion de lista de participantes.
				_CmdManager.RefrescaListaParticipantesConf(sala);
				if (!listaDeParticipantes1.oculto)
					listaDeParticipantes1.Visible = lpvisible; //230524 prueba y error.
				else 
					listaDeParticipantes1.Visible = false; //230524 prueba y error.
			}
		}

		bool HayActividadEnOtrasPaginas()
		{
			var rango1 = Enumerable.Range(0, FirstButtoConf);
			var rango2 = Enumerable.Range(Tlf.NumDestinations, Tlf.NumIaDestinations);
			var rango3 = rango1.Concat(rango2);
			foreach (int id1 in rango3)
			{
				if (
					(_StateManager.Tlf[id1].State != TlfState.Idle) &&
					(_StateManager.Tlf[id1].State != TlfState.Unavailable)
					)
					return true;
			}
			return false;
		}

		private void TlfButton_Click(object sender, EventArgs e)
		{
			int id = ((HMIButton)sender).Id;
			HMIButton hmibutton = (HMIButton)sender;
			if (esbotonconferencia(id))
			{
				string idconferencia = _StateManager.Tlf[id].Dst;
				//listaDeParticipantes1.SetIdConferencia(idconferencia);
				string sala = _CmdManager.GetSala(id - FirstButtoConf);
				listaDeParticipantes1.SetSala(sala);
				bool activo = AlgunOtroActivo(id - FirstButtoConf);
				bool visible = ListaVisible();
				if (!HayActividadEnOtrasPaginas())
				{
					if (_StateManager.Tlf[id].State == TlfState.Idle)
					{
						if (!activo || !visible)
							OcultaVisibiliza(id, sala);
					}
					else
					{
						if (visible)
							OcultaVisibiliza(id, sala);
					}
				}
			}

			try
			{
				_CmdManager.TlfClick(id);
			}
			catch (Exception ex)
			{
				int pos = _TlfButtons.IndexOf((HMIButton)sender);
				string msg = string.Format("ERROR pulsando tecla TlfAD [Pos={0}] [Id={1}]", pos, id);
				_Logger.Error(msg, ex);
			}
        }

	}
}

