//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.scsf.2007may/SCSF/html/02-09-010-ModelViewPresenter_MVP.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using System.Drawing;
using System.Diagnostics;
using System.Collections.Generic;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using Microsoft.Practices.CompositeUI;
using Microsoft.Practices.CompositeUI.EventBroker;
using HMI.Infrastructure.Interface;
using HMI.Model.Module.UI;
using HMI.Model.Module.Services;
using HMI.Model.Module.Messages;
using HMI.Model.Module.BusinessEntities;
using HMI.Presentation.Urr.Constants;
using HMI.Presentation.Urr.Properties;
using Utilities;
using NLog;

namespace HMI.Presentation.Urr.Views
{
    [SmartPart]
    public partial class TlfDaView : UserControl
    {
        private static Logger _Logger = LogManager.GetCurrentClassLogger();

        private IModelCmdManagerService _CmdManager;
        private StateManagerService _StateManager;
        private List<HMIButton> _TlfButtons = new List<HMIButton>();
        private Dictionary<HMIButton, Color> _FastBlinkList;
        private Dictionary<HMIButton, Color> _SlowBlinkList;
        private bool _FastBlinkOn = true;
        private bool _SlowBlinkOn = true;
        private int _Page = 0;
        private int _NumPositionsByPage;

        public TlfDaView([ServiceDependency] IModelCmdManagerService cmdManager, [ServiceDependency] StateManagerService stateManager)
        {
            InitializeComponent();

            _CmdManager = cmdManager;
            _StateManager = stateManager;

            _TlfButtonsTLP.RowCount = Settings.Default.TlfRows;
            _TlfButtonsTLP.RowStyles.Clear();

            for (int i = 0; i < _TlfButtonsTLP.RowCount; i++)
            {
                RowStyle st = new RowStyle(SizeType.Percent, 100);
                //_TlfButtonsTLP.RowStyles.Add(st);
            }

            _TlfButtonsTLP.ColumnCount = Settings.Default.TlfColumns;
            _TlfButtonsTLP.ColumnStyles.Clear();

            for (int i = 0; i < _TlfButtonsTLP.ColumnCount; i++)
            {
                ColumnStyle st = new ColumnStyle(SizeType.Percent, 100);
                //_TlfButtonsTLP.ColumnStyles.Add(st);
            }

            _NumPositionsByPage = (_TlfButtonsTLP.RowCount * _TlfButtonsTLP.ColumnCount) - 1;
            _FastBlinkList = new Dictionary<HMIButton, Color>();
            _SlowBlinkList = new Dictionary<HMIButton, Color>();

            for (int row = 0, pos = 0; row < _TlfButtonsTLP.RowCount; row++)
            {
                for (int column = 0; column < _TlfButtonsTLP.ColumnCount; column++, pos++)
                {
                    HMIButton bt = new HMIButton();
                   // _TlfButtonsTLP.Controls.Add(bt, column, row);
                    //_TlfButtons.Add(bt);

                    bt.Dock = DockStyle.Fill;
                    bt.Name = "_TlfButton" + pos;
                    bt.Visible = false;
                    bt.Id = pos == _NumPositionsByPage ? Tlf.IaMappedPosition : pos;

                    bt.Click += TlfButton_Click;
                }
            }

            _LcSpeakerUDB.Level = _StateManager.LcSpeaker.LevelLC;
            _TlfHeadPhonesUDB.Level = _StateManager.TlfHeadPhones.Level;
            _LcSpeakerUDB.Enabled = _StateManager.Tft.Enabled && _StateManager.Engine.Operative;
            _TlfHeadPhonesUDB.Enabled = _StateManager.Tft.Enabled && _StateManager.Engine.Operative;
            _TlfPageFirstBT.Enabled = _StateManager.Tft.Enabled;
            _TlfPageSecondBT.Enabled = _StateManager.Tft.Enabled;
        }

        [EventSubscription(EventTopicNames.TftEnabledChanged, ThreadOption.Publisher)]
        [EventSubscription(EventTopicNames.EngineStateChanged, ThreadOption.Publisher)]
        public void OnTftEngineChanged(object sender, EventArgs e)
        {
            _Logger.Trace("TlfDAView.OnTftEngineChanged");
            _LcSpeakerUDB.Enabled = _StateManager.Tft.Enabled && _StateManager.Engine.Operative;
            _TlfHeadPhonesUDB.Enabled = _StateManager.Tft.Enabled && _StateManager.Engine.Operative;
            _TlfPageFirstBT.Enabled = _StateManager.Tft.Enabled;
            _TlfPageSecondBT.Enabled = _StateManager.Tft.Enabled;

            foreach (HMIButton bt in _TlfButtons)
            {
                bt.Enabled = TlfDstEnabled(_StateManager.Tlf[bt.Id]);
            }
        }

        [EventSubscription(EventTopicNames.ActiveViewChanging, ThreadOption.Publisher)]
        public void OnActiveViewChanging(object sender, EventArgs<string> e)
        {
            if (e.Data == ViewNames.TlfDa)
            {
                int page = _Page;
                int firstBtPage = int.Parse(_TlfPageFirstBT.Text) - 1;
                int secondBtPage = int.Parse(_TlfPageSecondBT.Text) - 1;

                TlfState pageState = _StateManager.Tlf.GetTlfState(_Page * _NumPositionsByPage, _NumPositionsByPage);
                TlfState firstBtPageState = _StateManager.Tlf.GetTlfState(firstBtPage * _NumPositionsByPage, _NumPositionsByPage);
                TlfState secondBtPageState = _StateManager.Tlf.GetTlfState(secondBtPage * _NumPositionsByPage, _NumPositionsByPage);

                if ((int)firstBtPageState > (int)pageState)
                {
                    pageState = firstBtPageState;
                    page = firstBtPage;
                }
                if ((int)secondBtPageState > (int)pageState)
                {
                    page = secondBtPage;
                }

                if (page != _Page)
                {
                    _CmdManager.TlfLoadDaPage(page);
                }
            }
        }

        [EventSubscription(EventTopicNames.LcSpeakerLevelChanged, ThreadOption.Publisher)]
        public void OnLcSpeakerLevelChanged(object sender, EventArgs e)
        {
            _LcSpeakerUDB.Level = _StateManager.LcSpeaker.LevelLC;
        }

        [EventSubscription(EventTopicNames.TlfHeadPhonesLevelChanged, ThreadOption.Publisher)]
        public void OnTlfHeadPhonesLevelChanged(object sender, EventArgs e)
        {
            _TlfHeadPhonesUDB.Level = _StateManager.TlfHeadPhones.Level;
        }

        [EventSubscription(EventTopicNames.LoadTlfDaPageUI, ThreadOption.Publisher)]
        public void OnLoadTlfDaPage(object sender, PageMsg e)
        {
            if (_Page != e.Page)
            {
                Debug.Assert(e.Page < 3);

                _Page = e.Page;
                int absPageBegin = _Page * _NumPositionsByPage;

                if (_Page == 0)
                {
                    _TlfPageFirstBT.Text = "2";
                    _TlfPageSecondBT.Text = "3";
                }
                else if (_Page == 1)
                {
                    _TlfPageFirstBT.Text = "1";
                    _TlfPageSecondBT.Text = "3";
                }
                else if (_Page == 2)
                {
                    _TlfPageFirstBT.Text = "1";
                    _TlfPageSecondBT.Text = "2";
                }

                for (int i = 0; i < _NumPositionsByPage; i++)
                {
                    HMIButton bt = _TlfButtons[i];
                    TlfDst dst = _StateManager.Tlf[i + absPageBegin];

                    Reset(bt, dst);
                }

                ResetBtPage(_TlfPageFirstBT);
                ResetBtPage(_TlfPageSecondBT);
            }
        }

        [EventSubscription(EventTopicNames.TlfChanged, ThreadOption.Publisher)]
        public void OnTlfChanged(object sender, RangeMsg e)
        {
            Debug.Assert(e.Count > 0);

            /*if ((e.From + e.Count) > Tlf.IaMappedPosition)
            {
                HMIButton bt = _TlfButtons[_NumPositionsByPage];
                TlfDst dst = _StateManager.Tlf[Tlf.IaMappedPosition];

                Reset(bt, dst);
            }
            */
            /*if (e.From < Tlf.NumDestinations)
            {
                int absPageBegin = _Page * _NumPositionsByPage;
                int absFirstBtPageBegin = (int.Parse(_TlfPageFirstBT.Text) - 1) * _NumPositionsByPage;
                int absSecondBtPageBegin = (int.Parse(_TlfPageSecondBT.Text) - 1) * _NumPositionsByPage;

                for (int i = Math.Max(e.From, absPageBegin), to = Math.Min(e.From + e.Count, absPageBegin + _NumPositionsByPage); i < to; i++)
                {
                    HMIButton bt = _TlfButtons[i - absPageBegin];
                    TlfDst dst = _StateManager.Tlf[i];

                    Reset(bt, dst);
                }

                if ((e.From < absFirstBtPageBegin + _NumPositionsByPage) && (e.From + e.Count > absFirstBtPageBegin))
                {
                    ResetBtPage(_TlfPageFirstBT);
                }

                if ((e.From < absSecondBtPageBegin + _NumPositionsByPage) && (e.From + e.Count > absSecondBtPageBegin))
                {
                    ResetBtPage(_TlfPageSecondBT);
                }
            }*/
        }

        [EventSubscription(EventTopicNames.TlfPriorityChanged, ThreadOption.Publisher)]
        [EventSubscription(EventTopicNames.TlfListenChanged, ThreadOption.Publisher)]
        [EventSubscription(EventTopicNames.TlfTransferChanged, ThreadOption.Publisher)]
        public void OnFacilityChanged(object sender, EventArgs e)
        {
            int absPageBegin = _Page * _NumPositionsByPage;

            for (int i = 0; i < _NumPositionsByPage; i++)
            {
                HMIButton bt = _TlfButtons[i];
                TlfDst dst = _StateManager.Tlf[i + absPageBegin];

                Reset(bt, dst);
            }

            HMIButton mapBt = _TlfButtons[_NumPositionsByPage];
            TlfDst mapDst = _StateManager.Tlf[Tlf.IaMappedPosition];

            Reset(mapBt, mapDst);
        }

        private bool TlfDstEnabled(TlfDst dst)
        {
            return _StateManager.Tft.Enabled && _StateManager.Engine.Operative &&
                    !dst.Unavailable &&
                    (_StateManager.Tlf.Priority.State != FunctionState.Executing) &&
                    ((_StateManager.Tlf.Listen.State == FunctionState.Idle) || (_StateManager.Tlf.Listen.State == FunctionState.Ready)) &&
                    ((_StateManager.Tlf.Transfer.State == FunctionState.Idle) ||
                    ((_StateManager.Tlf.Transfer.State == FunctionState.Ready) &&
                    ((dst.State == TlfState.Idle) || (dst.State == TlfState.Hold) || (dst.State == TlfState.NotAllowed) ||
                    (dst.State == TlfState.Mem) || (dst.State == TlfState.RemoteMem))));
        }

        private void Reset(HMIButton bt, TlfDst dst)
        {
            bt.Id = dst.Id;

            if (_FastBlinkList.Remove(bt) && (_FastBlinkList.Count == 0))
            {
                _FastBlinkTimer.Enabled = false;
                _FastBlinkOn = true;
            }
            if (_SlowBlinkList.Remove(bt) && (_SlowBlinkList.Count == 0))
            {
                _SlowBlinkTimer.Enabled = false;
                _SlowBlinkOn = true;
            }

            if (dst.IsConfigurated)
            {
                Color backColor = VisualStyle.ButtonColor;

                if (!dst.Unavailable)
                {
                    backColor = GetStateColor(bt, dst.State);
                }

                bt.Reset(dst.Dst, dst.Unavailable, backColor);
                bt.Enabled = TlfDstEnabled(dst);
            }

            bt.Visible = dst.IsConfigurated;
        }

        private void ResetBtPage(HMIButton bt)
        {
            if (_FastBlinkList.Remove(bt) && (_FastBlinkList.Count == 0))
            {
                _FastBlinkTimer.Enabled = false;
                _FastBlinkOn = true;
            }
            if (_SlowBlinkList.Remove(bt) && (_SlowBlinkList.Count == 0))
            {
                _SlowBlinkTimer.Enabled = false;
                _SlowBlinkOn = true;
            }

            int page = int.Parse(bt.Text) - 1;
            TlfState st = _StateManager.Tlf.GetTlfState(page * _NumPositionsByPage, _NumPositionsByPage);
            bt.ButtonColor = GetStateColor(bt, st);
        }

        private Color GetStateColor(HMIButton bt, TlfState st)
        {
            Color backColor = VisualStyle.ButtonColor;

            switch (st)
            {
                case TlfState.Idle:
                case TlfState.PaPBusy:
                    break;
                case TlfState.In:
                    backColor = _SlowBlinkOn ? VisualStyle.Colors.Orange : VisualStyle.ButtonColor;
                    _SlowBlinkList[bt] = VisualStyle.Colors.Orange;
                    _SlowBlinkTimer.Enabled = true;
                    break;
                case TlfState.Out:
                    backColor = VisualStyle.Colors.Blue;
                    break;
                case TlfState.Set:
                case TlfState.Conf:
                    backColor = VisualStyle.Colors.Green;
                    break;
                case TlfState.Busy:
                case TlfState.OutOfService:
                    backColor = VisualStyle.Colors.Red;
                    break;
                case TlfState.Mem:
                    backColor = VisualStyle.Colors.Orange;
                    break;
                case TlfState.RemoteMem:
                    backColor = VisualStyle.Colors.DarkGray;
                    break;
                case TlfState.Hold:
                case TlfState.RemoteHold:
                    backColor = _SlowBlinkOn ? VisualStyle.Colors.Green : VisualStyle.ButtonColor;
                    _SlowBlinkList[bt] = VisualStyle.Colors.Green;
                    _SlowBlinkTimer.Enabled = true;
                    break;
                case TlfState.RemoteIn:
                    backColor = _SlowBlinkOn ? VisualStyle.Colors.DarkGray : VisualStyle.ButtonColor;
                    _SlowBlinkList[bt] = VisualStyle.Colors.DarkGray;
                    _SlowBlinkTimer.Enabled = true;
                    break;
                case TlfState.Congestion:
                    backColor = _SlowBlinkOn ? VisualStyle.Colors.Red : VisualStyle.ButtonColor;
                    _SlowBlinkList[bt] = VisualStyle.Colors.Red;
                    _SlowBlinkTimer.Enabled = true;
                    break;
                case TlfState.InPrio:
                    backColor = _FastBlinkOn ? VisualStyle.Colors.Orange : VisualStyle.ButtonColor;
                    _FastBlinkList[bt] = VisualStyle.Colors.Orange;
                    _FastBlinkTimer.Enabled = true;
                    break;
                case TlfState.NotAllowed:
                    backColor = _FastBlinkOn ? VisualStyle.Colors.Yellow : VisualStyle.ButtonColor;
                    _SlowBlinkList[bt] = VisualStyle.Colors.Yellow;
                    _SlowBlinkTimer.Enabled = true;
                    break;
            }

            return backColor;
        }

        private void _FastBlinkTimer_Tick(object sender, EventArgs e)
        {
            try
            {
                if (_FastBlinkTimer.Enabled)
                {
                    _FastBlinkOn = !_FastBlinkOn;
                    foreach (KeyValuePair<HMIButton, Color> p in _FastBlinkList)
                    {
                        p.Key.ButtonColor = _FastBlinkOn ? p.Value : VisualStyle.ButtonColor;
                    }
                }
            }
            catch (Exception ex)
            {
                _Logger.Error("ERROR generando parpadeo rapido para teclas TlfAD", ex);
            }
        }

        private void _SlowBlinkTimer_Tick(object sender, EventArgs e)
        {
            try
            {
                if (_SlowBlinkTimer.Enabled)
                {
                    _SlowBlinkOn = !_SlowBlinkOn;
                    foreach (KeyValuePair<HMIButton, Color> p in _SlowBlinkList)
                    {
                        p.Key.ButtonColor = _SlowBlinkOn ? p.Value : VisualStyle.ButtonColor;
                    }
                }
            }
            catch (Exception ex)
            {
                _Logger.Error("ERROR generando parpadeo lento para teclas TlfAD", ex);
            }
        }

        private void _LcSpeakerUDB_LevelDown(object sender, EventArgs e)
        {
            int level = _LcSpeakerUDB.Level - 1;

            try
            {
                _CmdManager.LcSetSpeakerLevel(level);
            }
            catch (Exception ex)
            {
                _Logger.Error("ERROR bajando el nivel del altavoz LC a " + level, ex);
            }
        }

        private void _LcSpeakerUDB_LevelUp(object sender, EventArgs e)
        {
            int level = _LcSpeakerUDB.Level + 1;

            try
            {
                _CmdManager.LcSetSpeakerLevel(level);
            }
            catch (Exception ex)
            {
                _Logger.Error("ERROR subiendo el nivel del altavoz LC a " + level, ex);
            }
        }

        private void _TlfHeadPhonesUDB_LevelDown(object sender, EventArgs e)
        {
            int level = _TlfHeadPhonesUDB.Level - 1;

            try
            {
                _CmdManager.TlfSetHeadPhonesLevel(level);
            }
            catch (Exception ex)
            {
                _Logger.Error("ERROR bajando el nivel de los microcascos TLF a " + level, ex);
            }
        }

        private void _TlfHeadPhonesUDB_LevelUp(object sender, EventArgs e)
        {
            int level = _TlfHeadPhonesUDB.Level + 1;

            try
            {
                _CmdManager.TlfSetHeadPhonesLevel(level);
            }
            catch (Exception ex)
            {
                _Logger.Error("ERROR subiendo el nivel de los microcascos TLF a " + level, ex);
            }
        }

        private void _TlfPageFirstBT_Click(object sender, EventArgs e)
        {
            int page = int.Parse(_TlfPageFirstBT.Text) - 1;

            try
            {
                _CmdManager.TlfLoadDaPage(page);
            }
            catch (Exception ex)
            {
                _Logger.Error("ERROR solicitando cambio de pagina TLF a " + page, ex);
            }
        }

        private void _TlfPageSecondBT_Click(object sender, EventArgs e)
        {
            int page = int.Parse(_TlfPageSecondBT.Text) - 1;

            try
            {
                _CmdManager.TlfLoadDaPage(page);
            }
            catch (Exception ex)
            {
                _Logger.Error("ERROR solicitando cambio de pagina TLF a " + page, ex);
            }
        }

        private void TlfButton_Click(object sender, EventArgs e)
        {
            int id = ((HMIButton)sender).Id;

            try
            {
                _CmdManager.TlfClick(id);
            }
            catch (Exception ex)
            {
                int pos = _TlfButtons.IndexOf((HMIButton)sender);
                string msg = string.Format("ERROR pulsando tecla TlfAD [Pos={0}] [Id={1}]", pos, id);
                _Logger.Error(msg, ex);
            }
        }
    }
}

