//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.scsf.2007may/SCSF/html/02-09-010-ModelViewPresenter_MVP.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Drawing;
using System.Diagnostics;
using System.Windows.Forms;
using System.Collections.Generic;
using System.Timers;
using Microsoft.Practices.CompositeUI;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using Microsoft.Practices.CompositeUI.EventBroker;
using HMI.Infrastructure.Interface;
using HMI.Model.Module.UI;
using HMI.Model.Module.Services;
using HMI.Model.Module.BusinessEntities;
using HMI.Model.Module.Messages;
using HMI.Presentation.AUrr.Constants;
using HMI.Presentation.AUrr.Properties;
using HMI.Presentation.AUrr.UI;
using Utilities;
using NLog;



namespace HMI.Presentation.AUrr.Views
{
    [SmartPart]
    public partial class RadioView : UserControl
    {
        [EventPublication(EventTopicNames.RdPosPttStateEngine, PublicationScope.Global)]
        public event EventHandler<RangeMsg<PttState>> RdPosPttStateEngine;

        [EventPublication(EventTopicNames.RdPosSquelchStateEngine, PublicationScope.Global)]
        public event EventHandler<RangeMsg<SquelchState>> RdPosSquelchStateEngine;

        [EventPublication(EventTopicNames.ShowNotifMsgEngine, PublicationScope.Global)]
        public event EventHandler<NotifMsg> ShowNotifMsgEngine;

        struct EstadoAsignacion
        {
            public bool Unavailable;
            public bool _Tx;
            public bool _Rx;
            public RdRxAudioVia _AudioVia;
        };

        private static Logger _Logger = LogManager.GetCurrentClassLogger();

        private IModelCmdManagerService _CmdManager = null;
        private StateManagerService _StateManager = null;
        private List<UrrRdButton> _RdButtons = new List<UrrRdButton>();
        private Dictionary<UrrRdButton, Image> _PttBlinkList = null;
        private Dictionary<UrrRdButton, Image> _SquelchBlinkList = null;
        private Dictionary<UrrRdButton, Color> _RtxBlinkList = null;
        private Dictionary<UrrRdButton, RdDst> _PttPushedList = null;
        private bool _PttBlinkOn = true;
        private bool _SquelchBlinkOn = true;
        private bool _RtxBlinkOn = true;
        private int _NumPositionsByPage;
        private bool _HalfDuplexErrorFired = false;
        private bool _TxErrorFired = false;
        private bool _RtxErrorActivated = false;
        private List<EstadoAsignacion> _EstadosAsignacion = new List<EstadoAsignacion>();

        private bool _RdSpeakerEnabled
        {
            get { return _StateManager.Tft.Enabled && _StateManager.Engine.Operative; }
        }
        private bool _RdHeadPhonesEnabled
        {
            get { return _StateManager.Tft.Enabled && _StateManager.Engine.Operative; }
        }
        private bool _PttEnabled
        {
            get { return _StateManager.Tft.Enabled && _StateManager.Engine.Operative; }
        }
        private bool _RtxEnabled
        {
            get
            {
                return _StateManager.Tft.Enabled && _StateManager.Engine.Operative &&
                    !_StateManager.Radio.PttOn &&
                    (_StateManager.Radio.GetNumFrAvalilablesForRtx(_urrRdPageButton.Page * _NumPositionsByPage, _NumPositionsByPage) > 1);
            }
        }

        private bool _RdPageEnabled
        {
            get { return _StateManager.Tft.Enabled && _StateManager.Engine.Operative && !_StateManager.Radio.PttOn; }
        }
        private string _Rtx // Miguel
        {
            get { return Resources.Rtx; }
        }
        public RadioView([ServiceDependency] IModelCmdManagerService cmdManager, [ServiceDependency] StateManagerService stateManager)
        {
            InitializeComponent();

            _CmdManager = cmdManager;
            _StateManager = stateManager;

            _RdButtonsTLP.RowCount = Settings.Default.RdRows;
            _RdButtonsTLP.RowStyles.Clear();

            for (int i = 0; i < _RdButtonsTLP.RowCount; i++)
            {
                RowStyle st = new RowStyle(SizeType.Percent, 100);
                _RdButtonsTLP.RowStyles.Add(st);
            }

            _RdButtonsTLP.ColumnCount = Settings.Default.RdColumns;
            _RdButtonsTLP.ColumnStyles.Clear();

            for (int i = 0; i < _RdButtonsTLP.ColumnCount; i++)
            {
                ColumnStyle st = new ColumnStyle(SizeType.Percent, 100);
                _RdButtonsTLP.ColumnStyles.Add(st);
            }

            _NumPositionsByPage = _RdButtonsTLP.RowCount * _RdButtonsTLP.ColumnCount;
            _PttBlinkList = new Dictionary<UrrRdButton, Image>();
            _SquelchBlinkList = new Dictionary<UrrRdButton, Image>();
            _RtxBlinkList = new Dictionary<UrrRdButton, Color>();
            _PttPushedList = new Dictionary<UrrRdButton, RdDst>();

            for (int row = 0, pos = 0; row < _RdButtonsTLP.RowCount; row++)
            {
                for (int column = 0; column < _RdButtonsTLP.ColumnCount; column++, pos++)
                {
                    UrrRdButton bt = new UrrRdButton();
                    _RdButtonsTLP.Controls.Add(bt, column, row);
                    _RdButtons.Add(bt);
                    _EstadosAsignacion.Add(new EstadoAsignacion());

                    bt.Dock = DockStyle.Fill;
                    bt.Name = "_RdButton" + pos;
                    bt.Visible = false;
                    bt.Id = pos;

                    bt.Click += RdButton_Click;
                    bt.TxClick += RdButton_TxClick;
                    bt.RxLongClick += RdButton_RxLongClick;
                    bt.RxShortClick += RdButton_RxShortClick;
                }
            }

            _UrrRdSpeakerUDB.Level = _StateManager.RdSpeaker.Level;
            _UrrRdSpeakerUDB.Enabled = _RdSpeakerEnabled;
            _UrrRdHeadPhonesUDB.Level = _StateManager.RdHeadPhones.Level;
            _UrrRdHeadPhonesUDB.Enabled = _RdHeadPhonesEnabled;
            _PttBT.Enabled = _PttEnabled;
            _RtxBT.Enabled = _RtxEnabled;
            //_RdPageBT.Enabled = _RdPageEnabled;
            _urrRdPageButton.Enabled = false; //_RdPageEnabled;
            _UrrUpPageBT.Enabled = _RdPageEnabled;
            _UrrDownPageBT.Enabled = _RdPageEnabled;

            //_RtxBT.Text = _Rtx; // Miguel

            // Para Enaire no hay recuperación de estados de asignación
            // 26/01/2017
            //RecuperaEstadoAsignacionFrecuencias();
        }

        [EventSubscription(EventTopicNames.TftEnabledChanged, ThreadOption.Publisher)]
        [EventSubscription(EventTopicNames.EngineStateChanged, ThreadOption.Publisher)]
        public void OnTftEngineChanged(object sender, EventArgs e)
        {
            _UrrRdSpeakerUDB.Enabled = _RdSpeakerEnabled;
            _UrrRdHeadPhonesUDB.Enabled = _RdHeadPhonesEnabled;
            _PttBT.Enabled = _PttEnabled;
            _RtxBT.Enabled = _RtxEnabled;
            //_RdPageBT.Enabled = _RdPageEnabled;
            _urrRdPageButton.Enabled = false;//_RdPageEnabled;
            _UrrUpPageBT.Enabled = _RdPageEnabled;
            _UrrDownPageBT.Enabled = _RdPageEnabled;

            if (!_UrrRdSpeakerUDB.Enabled)
                _UrrRdSpeakerUDB.ChangeColor(System.Drawing.Color.WhiteSmoke);
            else
                _UrrRdSpeakerUDB.ChangeColor(System.Drawing.Color.Gainsboro);

            if (!_UrrRdHeadPhonesUDB.Enabled)
                _UrrRdHeadPhonesUDB.ChangeColor(System.Drawing.Color.WhiteSmoke);
            else
                _UrrRdHeadPhonesUDB.ChangeColor(System.Drawing.Color.Gainsboro);

            foreach (UrrRdButton bt in _RdButtons)
            {
                //VMG TEST
                bt.Enabled = _StateManager.Tft.Enabled && _StateManager.Engine.Operative && !_StateManager.Radio[bt.Id].Unavailable;
            }
        }

        [EventSubscription(EventTopicNames.RdSpeakerLevelChanged, ThreadOption.Publisher)]
        public void OnRdSpeakerLevelChanged(object sender, EventArgs e)
        {
            _UrrRdSpeakerUDB.Level = _StateManager.RdSpeaker.Level;
        }

        [EventSubscription(EventTopicNames.RdHeadPhonesLevelChanged, ThreadOption.Publisher)]
        public void OnRdHeadPhonesLevelChanged(object sender, EventArgs e)
        {
            _UrrRdHeadPhonesUDB.Level = _StateManager.RdHeadPhones.Level;
        }

        //VMG PTT CHANGED
        [EventSubscription(EventTopicNames.PttOnChanged, ThreadOption.Publisher)]
        public void OnPttOnChanged(object sender, EventArgs e)
        {
            //Control de los mensajes para sacar los errores si se pulsa el Ptt
            if (_StateManager.Radio.PttOn)
            {
                if (Int32.Parse(Settings.Default.TxConfirmationDetectionTimeOut) < 10)
                    this._PttPushedTimer.Enabled = false;
                else
                {
                    this._PttPushedTimer.Enabled = true;
                    this._PttPushedTimer.Interval = Int32.Parse(Settings.Default.TxConfirmationDetectionTimeOut);
                }
                if (Int32.Parse(Settings.Default.CarrierDetectionTimeOut) < 10)
                    this._HalfDuplexTimer.Enabled = false;
                else
                {
                    this._HalfDuplexTimer.Enabled = true;
                    this._HalfDuplexTimer.Interval = Int32.Parse(Settings.Default.CarrierDetectionTimeOut);
                }
            }
            else
            {//Liberar del estado de error los que tengan fallo al soltar el Ptt
                _PttPushedTimer.Enabled = false;
                _HalfDuplexTimer.Enabled = false;
                _HalfDuplexErrorFired = false;
                _TxErrorFired = false;

                var otra = new Dictionary<UrrRdButton, RdDst>(_PttPushedList);
                foreach (KeyValuePair<UrrRdButton, RdDst> p in otra)
                {
                    if (p.Value.Ptt != PttState.PttOnlyPort)
                    {
                        if (p.Value.Ptt != PttState.PttPortAndMod)
                        {
                            if (p.Value.Ptt != PttState.ExternPtt)
                            {
                                try
                                {
                                    General.SafeLaunchEvent(RdPosPttStateEngine, this, new RangeMsg<PttState>(p.Key.Id, PttState.NoPtt));
                                }
                                catch (Exception ex)
                                {
                                    _Logger.Error("ERROR generando evento PTT. " + ex);
                                }
                            }
                        }
                    }
                }
            }
            _PttBT.ButtonColor = _StateManager.Radio.PttOn ? HMI.Presentation.AUrr.UI.VisualStyle.Colors.StrongGreen : HMI.Presentation.AUrr.UI.VisualStyle.ButtonColor;
            _RtxBT.Enabled = _RtxEnabled;
            //_RdPageBT.Enabled = _RdPageEnabled;
            _urrRdPageButton.Enabled = false;//_RdPageEnabled;
            _UrrUpPageBT.Enabled = _RdPageEnabled;
            _UrrDownPageBT.Enabled = _RdPageEnabled;

        }

        [EventSubscription(EventTopicNames.SiteManagerChanged, ThreadOption.Publisher)]
        public void OnSiteManagerChanged(object sender, EventArgs e)
        {
            //_SiteManagerBT.Visible = _StateManager.Radio.SiteManager;
            //_StateManager.Radio.SiteManager
            _PttBT.ButtonColor = _StateManager.Radio.PttOn ? HMI.Presentation.AUrr.UI.VisualStyle.Colors.StrongGreen : HMI.Presentation.AUrr.UI.VisualStyle.ButtonColor;
            //_RtxBT.Enabled = _RtxEnabled;
            //_RdPageBT.Enabled = _RdPageEnabled;
            //_urrRdPageButton.Enabled = _RdPageEnabled;
            //_UrrUpPageBT.Enabled = _RdPageEnabled;
            //_UrrDownPageBT.Enabled = _RdPageEnabled;

        }

        [EventSubscription(EventTopicNames.SiteChanged, ThreadOption.Publisher)]
        public void SiteChanged(object sender, StateMsg<string> msg)
        {
            int absPageBegin = _urrRdPageButton.Page * _NumPositionsByPage;

            for (int i = 0; i < _NumPositionsByPage; i++)
            {
                UrrRdButton bt = _RdButtons[i];
                RdDst dst = _StateManager.Radio[i + absPageBegin];

                Reset(bt, dst);
            }
        }


        [EventSubscription(EventTopicNames.RtxChanged, ThreadOption.Publisher)]
        public void OnRtxChanged(object sender, EventArgs e)
        {
            if (_StateManager.Radio.Rtx > 0)
            {
                _RtxBT.Text = "Rtx " + (char)('G' + _StateManager.Radio.Rtx - 1);
                _RtxBT.ButtonColor = _RtxBlinkOn ? HMI.Presentation.AUrr.UI.VisualStyle.Colors.Yellow : HMI.Presentation.AUrr.UI.VisualStyle.ButtonColor;
                _RtxBlinkTimer.Enabled = true;
                _RtxErrorTimer.Enabled = false;
                _RtxErrorActivated = false;
            }
            else
            {
                _RtxBlinkTimer.Enabled = false;
                _RtxErrorTimer.Enabled = true;
                _RtxBlinkOn = true;
                _RtxBT.Text = "Rtx";
                _RtxBT.ButtonColor = HMI.Presentation.AUrr.UI.VisualStyle.ButtonColor;
            }

            int absPageBegin = _urrRdPageButton.Page * _NumPositionsByPage;

            for (int i = 0; i < _NumPositionsByPage; i++)
            {
                UrrRdButton bt = _RdButtons[i];
                RdDst dst = _StateManager.Radio[i + absPageBegin];

                Reset(bt, dst);
            }
        }

        [EventSubscription(EventTopicNames.RdPageChanged, ThreadOption.Publisher)]
        public void OnRdPageChanged(object sender, EventArgs e)
        {
            _urrRdPageButton.Page = _StateManager.Radio.Page;
            int absPageBegin = _urrRdPageButton.Page * _NumPositionsByPage;

            for (int i = 0; i < _NumPositionsByPage; i++)
            {
                UrrRdButton bt = _RdButtons[i];
                RdDst dst = _StateManager.Radio[i + absPageBegin];

                Reset(bt, dst);
            }
        }

        [EventSubscription(EventTopicNames.RadioChanged, ThreadOption.Publisher)]
        public void OnRadioChanged(object sender, RangeMsg e)
        {
            Debug.Assert(e.Count > 0);
            int absPageBegin = _urrRdPageButton.Page * _NumPositionsByPage;

            for (int i = Math.Max(e.From, absPageBegin), to = Math.Min(e.From + e.Count, absPageBegin + _NumPositionsByPage); i < to; i++)
            {
                UrrRdButton bt = _RdButtons[i - absPageBegin];
                RdDst dst = _StateManager.Radio[i];
                EstadoAsignacion estado = _EstadosAsignacion[i - absPageBegin];
                Reset(bt, dst, ref estado);
                // Para versión Enaire no hay recuperación de estados de asignación
                // 26/01/2017
                //_EstadosAsignacion[i - absPageBegin] = estado;
                //
                //if (i < Settings.Default.AssignatedStates.Count)
                //{
                //    Settings.Default.AssignatedStates.RemoveAt(i - absPageBegin);
                //    Settings.Default.AssignatedStates.Insert(i - absPageBegin, dst.Frecuency + "," + _EstadosAsignacion[i - absPageBegin]._Rx.ToString() + "," +
                //                                        ((dst.TipoFrecuencia == 1) ? false : _EstadosAsignacion[i - absPageBegin]._Tx) +
                //                                            "," + _EstadosAsignacion[i - absPageBegin]._AudioVia + "," + _EstadosAsignacion[i - absPageBegin].Unavailable);
                //}
                //else
                //{
                //    Settings.Default.AssignatedStates.Add(dst.Frecuency + "," + _EstadosAsignacion[i - absPageBegin]._Rx.ToString() + "," +
                //                                        ((dst.TipoFrecuencia == 1) ? false : _EstadosAsignacion[i - absPageBegin]._Tx) +
                //                                            "," + _EstadosAsignacion[i - absPageBegin]._AudioVia + "," + _EstadosAsignacion[i - absPageBegin].Unavailable);
                //}
            }

            //Settings.Default.Save();
            // Fin modificación 26/01/2017

            _RtxBT.Enabled = _RtxEnabled;
        }

        [EventSubscription(EventTopicNames.TitleIdChanged, ThreadOption.Publisher)]
        public void OnTitleIdChanged(object sender, EventArgs e)
        {
            if (Settings.Default.Sector != _StateManager.Title.Id)
            {
                int absPageBegin = _urrRdPageButton.Page * _NumPositionsByPage;

                for (int i = absPageBegin, to = absPageBegin + _NumPositionsByPage; i < to; i++)
                {
                    UrrRdButton bt = _RdButtons[i - absPageBegin];
                    if (!_StateManager.Radio[i].Unavailable && _StateManager.Radio[i].Rx)
                    {
                        RdButton_RxLongClick(bt, null);
                    }
                }

                Settings.Default.Sector = _StateManager.Title.Id;
                Settings.Default.Save();
            }
        }

        private void RecuperaEstadoAsignacionFrecuencias()
        {
            int absPageBegin = _urrRdPageButton.Page * _NumPositionsByPage;

            for (int i = absPageBegin, to = absPageBegin + _NumPositionsByPage; i < to; i++)
            {
                if (i < Settings.Default.AssignatedStates.Count)
                {
                    string[] estado = Settings.Default.AssignatedStates[i].Split(',');

                    EstadoAsignacion eAsignacion = new EstadoAsignacion();

                    eAsignacion._Rx = estado[1] == "True";
                    eAsignacion._Tx = estado[2] == "True";
                    switch (estado[3])
                    {
                        case "HeadPhones":
                            eAsignacion._AudioVia = RdRxAudioVia.HeadPhones;
                            break;
                        case "Speaker":
                            eAsignacion._AudioVia = RdRxAudioVia.Speaker;
                            break;
                        case "NoAudio":
                            eAsignacion._AudioVia = RdRxAudioVia.NoAudio;
                            break;
                    }

                    _EstadosAsignacion[i - absPageBegin] = eAsignacion;

                }
            }
        }

        private void Reset(UrrRdButton bt, RdDst dst, ref EstadoAsignacion estado)
        {
            Reset(bt, dst);

            if (!dst.Unavailable && estado.Unavailable && !_StateManager.ScreenSaver.On)
            {
                if (estado._Rx && !dst.Rx)
                {
                    //RdButton_RxShortClick(bt, null);
                    Forced_RxShortClick(bt);
                }
                else if (estado._AudioVia == RdRxAudioVia.HeadPhones)
                {
                    if (dst.TipoFrecuencia == TipoFrecuencia_t.HF && (dst.AudioVia == RdRxAudioVia.HfSpeaker || dst.AudioVia == RdRxAudioVia.Speaker))
                        //RdButton_RxShortClick(bt, null);
                        Forced_RxShortClick(bt);
                    else if (dst.TipoFrecuencia != TipoFrecuencia_t.HF && dst.AudioVia == RdRxAudioVia.Speaker)
                        //RdButton_RxShortClick(bt, null);
                        Forced_RxShortClick(bt);
                }
                else if (estado._AudioVia == RdRxAudioVia.HfSpeaker && dst.AudioVia == RdRxAudioVia.Speaker)
                {
                    //RdButton_RxShortClick(bt, null);
                    Forced_RxShortClick(bt);
                }

                if (estado._Tx && !dst.Tx)
                {
                    //RdButton_TxClick(bt, null);
                    try
                    {
                        // Forzar la asignación de Tx independientemente de si está ya asignada en otra posición
                        _CmdManager.RdConfirmTxState(bt.Id);
                    }
                    catch (Exception ex)
                    {
                        int pos = _RdButtons.IndexOf(bt);
                        string msg = string.Format("ERROR modificando Tx de frecuencia RD [Pos={0}] [Id={1}]", pos, bt.Id);
                        _Logger.Error(msg, ex);
                    }
                }
            }
            else if (!dst.Unavailable && !estado.Unavailable)
            {
                estado._Tx = dst.Tx;
                estado._Rx = dst.Rx;
                estado._AudioVia = dst.AudioVia;
            }

            estado.Unavailable = dst.Unavailable ||
                                estado._Rx != dst.Rx ||
                                estado._Tx != dst.Tx ||
                                estado._AudioVia != dst.AudioVia;
        }

        private void Reset(UrrRdButton bt, RdDst dst)
        {
            bt.Id = dst.Id;

            if (_PttBlinkList.Remove(bt) && (_PttBlinkList.Count == 0))
            {
                _PttBlinkTimer.Enabled = false;
                _PttBlinkOn = true;
            }
            if (_SquelchBlinkList.Remove(bt) && (_SquelchBlinkList.Count == 0))
            {
                _SquelchBlinkTimer.Enabled = false;
                _SquelchBlinkOn = true;
            }
            _RtxBlinkList.Remove(bt);
            _PttPushedList.Remove(bt);

            if (dst.IsConfigurated)
            {
                Color title = HMI.Presentation.AUrr.UI.VisualStyle.ButtonColor;
                Color tx = HMI.Presentation.AUrr.UI.VisualStyle.ButtonColor;
                Color rx = HMI.Presentation.AUrr.UI.VisualStyle.ButtonColor;
                Color txForeColor = HMI.Presentation.AUrr.UI.VisualStyle.Colors.Black;
                Color rxForeColor = HMI.Presentation.AUrr.UI.VisualStyle.Colors.Black;
                Color titleForeColor = HMI.Presentation.AUrr.UI.VisualStyle.Colors.Black;
                Image ptt = null;
                Image squelch = null;
                Image audio = null;
                int rtxGroup = 0;
                bool allAsOneBt = false;
                string alias = dst.Alias;
                bool isGreenIcons = false;

                if (!dst.Unavailable)
                {
                    rtxGroup = dst.RtxGroup;
                    alias = (dst.TempAlias != string.Empty && dst.TempAlias != dst.Alias) ? dst.TempAlias : alias;

                    if (_StateManager.ManagingSite)
                    {
                        allAsOneBt = true;
                        title = _RtxBlinkOn ? HMI.Presentation.AUrr.UI.VisualStyle.Colors.Yellow : HMI.Presentation.AUrr.UI.VisualStyle.ButtonColor;
                        _RtxBlinkList[bt] = HMI.Presentation.AUrr.UI.VisualStyle.Colors.Yellow;
                        //alias = (dst.TempAlias != string.Empty && dst.TempAlias != dst.Alias) ? dst.TempAlias : alias;
                    }
                    else if (dst.Rx)
                    {
                        rx = HMI.Presentation.AUrr.UI.VisualStyle.Colors.White;

                        rxForeColor = HMI.Presentation.AUrr.UI.VisualStyle.Colors.Green;

                        if (dst.Tx)
                        {
                            tx = HMI.Presentation.AUrr.UI.VisualStyle.Colors.HeaderBlueA1;
                            bt.changeTxText("Tx");
                            txForeColor = HMI.Presentation.AUrr.UI.VisualStyle.Colors.Black;//Seleccionado en reposo
                            _PttPushedList[bt] = dst;

                            if (_StateManager.Radio.Rtx > 0)
                            {
                                rtxGroup = dst.RtxGroup < 0 ? dst.RtxGroup : dst.TempRtxGroup;

                                if (rtxGroup == 0)
                                {
                                    allAsOneBt = true;
                                    title = _RtxBlinkOn ? HMI.Presentation.AUrr.UI.VisualStyle.Colors.Yellow : bt.CurrentBackColor;
                                    _RtxBlinkList[bt] = HMI.Presentation.AUrr.UI.VisualStyle.Colors.Yellow;
                                }
                                else if (rtxGroup == _StateManager.Radio.Rtx)
                                {
                                    allAsOneBt = true;
                                    title = HMI.Presentation.AUrr.UI.VisualStyle.Colors.Yellow;
                                }
                            }
                        }
                        else
                            bt.changeTxText("");
                    }

                    switch (dst.Ptt)
                    {
                        case PttState.NoPtt:
                            if (dst.Tx)
                                tx = HMI.Presentation.AUrr.UI.VisualStyle.Colors.HeaderBlueA1;
                            else
                                tx = HMI.Presentation.AUrr.UI.VisualStyle.ButtonColor;
                            //<VMG 24/07------------------
                            //if (dst.Squelch == SquelchState.SquelchOnlyPort && dst.RtxGroup == 1)
                            //    titleForeColor = HMI.Presentation.AUrr.UI.VisualStyle.Colors.Red;
                            //VMG 24/07------------------>
                            break;
                        case PttState.ExternPtt:
                            titleForeColor = HMI.Presentation.AUrr.UI.VisualStyle.Colors.Red;
                            break;
                        case PttState.PttOnlyPort:
                            //ptt = Resources.Ptt;
                            //txForeColor = HMI.Presentation.AUrr.UI.VisualStyle.Colors.StrongGreen;
                            
                            //<VMG 24/07------------------
                            //if (dst.RtxGroup == 1)
                            //{
                            //    titleForeColor = HMI.Presentation.AUrr.UI.VisualStyle.Colors.Red;
                            //    txForeColor = HMI.Presentation.AUrr.UI.VisualStyle.Colors.Red;
                            //}
                            //else
                            //VMG 24/07------------------>
                            title = HMI.Presentation.AUrr.UI.VisualStyle.Colors.DarkGreen;
                            break;
                        case PttState.PttPortAndMod:
                            //ptt = _PttBlinkOn ? Resources.Ptt : null;
                            //txForeColor = HMI.Presentation.AUrr.UI.VisualStyle.Colors.StrongGreen;
                            title = HMI.Presentation.AUrr.UI.VisualStyle.Colors.DarkGreen;
                            _PttBlinkList[bt] = Resources.Ptt;
                            _PttBlinkTimer.Enabled = true;
                            break;
                        case PttState.Blocked:
                            title = HMI.Presentation.AUrr.UI.VisualStyle.Colors.Red;
                            titleForeColor = HMI.Presentation.AUrr.UI.VisualStyle.Colors.DarkRed;
                            //ptt = Resources.PttBlocked;
                            //txForeColor = HMI.Presentation.AUrr.UI.VisualStyle.Colors.HeaderBlue;
                            break;
                        /** halfduplex */
                        case PttState.Error://Error en portadora
                            title = HMI.Presentation.AUrr.UI.VisualStyle.Colors.Red;
                            //txForeColor = HMI.Presentation.AUrr.UI.VisualStyle.Colors.Red;
                            NotifMsg msg = new NotifMsg("Bad Operation", Resources.BadOperation, Resources.CarrierDetectionError, 3000, MessageType.Error, MessageButtons.Ok);
                            General.SafeLaunchEvent(ShowNotifMsgEngine, this, msg);
                            break;
                        default://Error en Tx
                            // PttState.PttNotConfirmed
                            title = HMI.Presentation.AUrr.UI.VisualStyle.Colors.Red;
                            //txForeColor = HMI.Presentation.AUrr.UI.VisualStyle.Colors.Red;
                            NotifMsg msg2 = new NotifMsg("Bad Operation", Resources.BadOperation, Resources.TxConfirmationDetectionError, 3000, MessageType.Error, MessageButtons.Ok);
                            General.SafeLaunchEvent(ShowNotifMsgEngine, this, msg2);
                            break;

                    }

                    switch (dst.Squelch)
                    {
                        case SquelchState.SquelchOnlyPort:
                            if(dst.Ptt==PttState.ExternPtt)
                                txForeColor = HMI.Presentation.AUrr.UI.VisualStyle.Colors.Red;
                            //squelch = Resources.Squelch;
                            switch (dst.AudioVia)
                            {
                                case RdRxAudioVia.Speaker:
                                    rx = HMI.Presentation.AUrr.UI.VisualStyle.Colors.DarkGreen;
                                    audio = Resources.RxSpeakerBlack;//Iconos negros
                                    isGreenIcons = true;
                                    break;
                                case RdRxAudioVia.HeadPhones:
                                    rx = HMI.Presentation.AUrr.UI.VisualStyle.Colors.DarkGreen;
                                    audio = Resources.RxHeadPhonesBlack;
                                    isGreenIcons = true;
                                    break;
                                case RdRxAudioVia.NoAudio:
                                    rxForeColor = HMI.Presentation.AUrr.UI.VisualStyle.Colors.StrongGreen;
                                    rx = HMI.Presentation.AUrr.UI.VisualStyle.Colors.DarkGreen;
                                    break;
                            }


                            break;
                        case SquelchState.SquelchPortAndMod:
                            //squelch = _SquelchBlinkOn ? Resources.Squelch : null;
                            switch (dst.AudioVia)
                            {
                                case RdRxAudioVia.Speaker:
                                    audio = Resources.RxSpeaker;//Iconos verdes
                                    isGreenIcons = true;
                                    break;
                                case RdRxAudioVia.HeadPhones:
                                    audio = Resources.RxHeadPhones;
                                    isGreenIcons = true;
                                    break;
                                case RdRxAudioVia.NoAudio:
                                    rxForeColor = HMI.Presentation.AUrr.UI.VisualStyle.Colors.StrongGreen;
                                    break;
                            }
                            _SquelchBlinkList[bt] = Resources.Squelch;
                            _SquelchBlinkTimer.Enabled = true;
                            break;
                        case SquelchState.NoSquelch:
                            //isNoSquelch = true;
                            break;
                    }

                    if (!isGreenIcons)
                    {
                        switch (dst.AudioVia)
                        {
                            case RdRxAudioVia.Speaker:
                                audio = Resources.RxSpeakerBlack;//Iconos negros
                                break;
                            case RdRxAudioVia.HeadPhones:
                                audio = Resources.RxHeadPhonesBlack;
                                break;
                        }
                    }
                }
                else
                {
                    bt.changeTxText("");
                    title = HMI.Presentation.AUrr.UI.VisualStyle.Colors.HeaderBlueA1;
                    tx = HMI.Presentation.AUrr.UI.VisualStyle.ButtonColor;
                    rx = HMI.Presentation.AUrr.UI.VisualStyle.ButtonColor;
                }
                // Mostrar información Qidx sólo si en HMI.exe.config está habilitado
                if (Settings.Default.ShowBssProperties)
                {
                    bt.Reset(dst.Frecuency, dst.TipoFrecuencia == TipoFrecuencia_t.FD ? dst.QidxResource : alias, dst.Unavailable, allAsOneBt, rtxGroup, ptt, squelch, audio, title, tx, rx, txForeColor, rxForeColor, titleForeColor,
                    dst.QidxResource, dst.QidxValue, dst.State == FrequencyState.Degraded);
                }
                else
                {
                    bt.Reset(dst.Frecuency, dst.TipoFrecuencia == TipoFrecuencia_t.FD ? string.Empty : alias, dst.Unavailable, allAsOneBt, rtxGroup, ptt, squelch, audio, title, tx, rx, txForeColor, rxForeColor, titleForeColor,
                    dst.State == FrequencyState.Degraded);
                }
                bt.Enabled = _StateManager.Tft.Enabled && _StateManager.Engine.Operative && !dst.Unavailable;
            }

            bt.Visible = dst.IsConfigurated;
        }

        private void _RdSpeakerUDB_LevelDown(object sender, EventArgs e)
        {
            int level = _UrrRdSpeakerUDB.Level - 1;

            try
            {
                _CmdManager.RdSetSpeakerLevel(level);
            }
            catch (Exception ex)
            {
                _Logger.Error("ERROR bajando el nivel del altavoz RD a " + level, ex);
            }
        }

        private void _RdSpeakerUDB_LevelUp(object sender, EventArgs e)
        {
            int level = _UrrRdSpeakerUDB.Level + 1;

            try
            {
                _CmdManager.RdSetSpeakerLevel(level);
            }
            catch (Exception ex)
            {
                _Logger.Error("ERROR subiendo el nivel del altavoz RD a " + level, ex);
            }
        }

        private void _RdHeadPhonesUDB_LevelDown(object sender, EventArgs e)
        {
            int level = _UrrRdHeadPhonesUDB.Level - 1;

            try
            {
                _CmdManager.RdSetHeadPhonesLevel(level);
            }
            catch (Exception ex)
            {
                _Logger.Error("ERROR bajando el nivel de los microcascos RD a " + level, ex);
            }
        }

        private void _RdHeadPhonesUDB_LevelUp(object sender, EventArgs e)
        {
            int level = _UrrRdHeadPhonesUDB.Level + 1;

            try
            {
                _CmdManager.RdSetHeadPhonesLevel(level);
            }
            catch (Exception ex)
            {
                _Logger.Error("ERROR subiendo el nivel de los microcascos RD a " + level, ex);
            }
        }

        private void _RtxBT_Click(object sender, EventArgs e)
        {
            try
            {
                _CmdManager.RdRtxClick(_NumPositionsByPage);
            }
            catch (Exception ex)
            {
                _Logger.Error("ERROR iniciando operacion Rtx", ex);
            }
        }

        private void _PttBT_MouseDown(object sender, MouseEventArgs e)
        {
            try
            {
                _CmdManager.RdSetPtt(true);
            }
            catch (Exception ex)
            {
                _Logger.Error("ERROR pulsando boton de Ptt", ex);
            }
        }

        private void _PttBT_MouseUp(object sender, MouseEventArgs e)
        {
            try
            {
                _CmdManager.RdSetPtt(false);
            }
            catch (Exception ex)
            {
                _Logger.Error("ERROR liberando boton de Ptt", ex);
            }
        }

        private void _RdPageBT_UpClick(object sender)
        {
            int actualPage = _urrRdPageButton.Page;

            try
            {
                _CmdManager.RdLoadNextPage(actualPage, _NumPositionsByPage);
            }
            catch (Exception ex)
            {
                string msg = string.Format("ERROR solicitando pagina RD siguiente [Actual={0}]", actualPage);
                _Logger.Error(msg, ex);
            }
        }

        private void _RdPageBT_DownClick(object sender)
        {
            int actualPage = _urrRdPageButton.Page;

            try
            {
                _CmdManager.RdLoadPrevPage(actualPage, _NumPositionsByPage);
            }
            catch (Exception ex)
            {
                string msg = string.Format("ERROR solicitando pagina RD previa [Actual={0}]", actualPage);
                _Logger.Error(msg, ex);
            }
        }

        private void RdButton_Click(object sender, EventArgs e)
        {
            int id = ((UrrRdButton)sender).Id;

            try
            {
                if (_StateManager.ManagingSite)
                    _CmdManager.ChangeSite(id);
                else
                    _CmdManager.RdSwitchRtxState(id);
            }
            catch (Exception ex)
            {
                int pos = _RdButtons.IndexOf((UrrRdButton)sender);
                string msg = string.Format("ERROR modificando pertenencia a grupo Rtx de frecuencia RD [Pos={0}] [Id={1}]", pos, id);
                _Logger.Error(msg, ex);
            }
        }

        private void RdButton_TxClick(object sender, EventArgs e)
        {
            int id = ((UrrRdButton)sender).Id;

            try
            {
                _CmdManager.RdSwitchTxState(id);
            }
            catch (Exception ex)
            {
                int pos = _RdButtons.IndexOf((UrrRdButton)sender);
                string msg = string.Format("ERROR modificando Tx de frecuencia RD [Pos={0}] [Id={1}]", pos, id);
                _Logger.Error(msg, ex);
            }
        }

        private void RdButton_RxLongClick(object sender, EventArgs e)
        {
            int id = ((UrrRdButton)sender).Id;

            try
            {
                _CmdManager.RdSwitchRxState(id, true);
            }
            catch (Exception ex)
            {
                int pos = _RdButtons.IndexOf((UrrRdButton)sender);
                string msg = string.Format("ERROR modificando Rx de frecuencia RD mediante pulsacion larga [Pos={0}] [Id={1}]", pos, id);
                _Logger.Error(msg, ex);
            }
        }

        private void RdButton_RxShortClick(object sender, EventArgs e)
        {
            int id = ((UrrRdButton)sender).Id;

            try
            {
                _CmdManager.RdSwitchRxState(id, false);
            }
            catch (Exception ex)
            {
                int pos = _RdButtons.IndexOf((UrrRdButton)sender);
                string msg = string.Format("ERROR modificando Rx de frecuencia RD mediante pulsacion corta [Pos={0}] [Id={1}]", pos, id);
                _Logger.Error(msg, ex);
            }
        }

        private void Forced_RxShortClick(object sender)
        {
            int id = ((UrrRdButton)sender).Id;

            try
            {
                _CmdManager.RdForceRxState(id);
            }
            catch (Exception ex)
            {
                int pos = _RdButtons.IndexOf((UrrRdButton)sender);
                string msg = string.Format("ERROR modificando Rx de frecuencia RD a partir de recuperar estado asignación [Pos={0}] [Id={1}]", pos, id);
                _Logger.Error(msg, ex);
            }
        }

        private void _SiteManagerBT_Click(object sender, EventArgs e)
        {
            try
            {
                _CmdManager.RdSiteManagerClick();
                //_SiteManagerBT.ButtonColor = _StateManager.ManagingSite ? VisualStyle.Colors.Yellow : VisualStyle.ButtonColor;

                int absPageBegin = _urrRdPageButton.Page * _NumPositionsByPage;
                for (int i = 0; i < _NumPositionsByPage; i++)
                {
                    UrrRdButton bt = _RdButtons[i];
                    RdDst dst = _StateManager.Radio[i + absPageBegin];

                    Reset(bt, dst);
                }
            }
            catch (Exception ex)
            {
                _Logger.Error("ERROR iniciando operacion SiteManager", ex);
            }
        }


        private void _PttBlinkTimer_Tick(object sender, EventArgs e)
        {
            try
            {
                if (_PttBlinkTimer.Enabled)
                {
                    _PttBlinkOn = !_PttBlinkOn;
                    foreach (KeyValuePair<UrrRdButton, Image> p in _PttBlinkList)
                    {
                        p.Key.PttImage = _PttBlinkOn ? p.Value : null;
                    }
                }
            }
            catch (Exception ex)
            {
                _Logger.Error("ERROR generando parpadeo de Ptt", ex);
            }
        }

        private void _SquelchBlinkTimer_Tick(object sender, EventArgs e)
        {
            try
            {
                if (_SquelchBlinkTimer.Enabled)
                {
                    _SquelchBlinkOn = !_SquelchBlinkOn;
                    foreach (KeyValuePair<UrrRdButton, Image> p in _SquelchBlinkList)
                    {
                        p.Key.SquelchImage = _SquelchBlinkOn ? p.Value : null;
                    }
                }
            }
            catch (Exception ex)
            {
                _Logger.Error("ERROR generando parpadeo de Squelch", ex);
            }
        }

        private void _RtxBlinkTimer_Tick(object sender, EventArgs e)
        {
            try
            {
                if (_RtxBlinkTimer.Enabled)
                {
                    _RtxBlinkOn = !_RtxBlinkOn;
                    _RtxBT.ButtonColor = _RtxBlinkOn ? HMI.Presentation.AUrr.UI.VisualStyle.Colors.Yellow : HMI.Presentation.AUrr.UI.VisualStyle.ButtonColor;

                    foreach (KeyValuePair<UrrRdButton, Color> p in _RtxBlinkList)
                    {
                        p.Key.TitleBackColor = _RtxBlinkOn ? p.Value : p.Key.CurrentBackColor;
                    }
                }
            }
            catch (Exception ex)
            {
                _Logger.Error("ERROR generando parpadeo de Rtx", ex);
            }
        }

        //Timer Error Transmision
        private void _PttPushedTimer_Tick(object sender, EventArgs e)
        {
            try
            {
                if (_PttPushedTimer.Enabled)
                {
                    var otra = new Dictionary<UrrRdButton, RdDst>(_PttPushedList);
                    foreach (KeyValuePair<UrrRdButton, RdDst> p in otra)
                    {
                        if (p.Value.Ptt != PttState.PttOnlyPort)
                        {
                            if (p.Value.Ptt != PttState.PttPortAndMod)
                            {
                                if (p.Value.Ptt != PttState.ExternPtt)
                                {
                                    if (!_HalfDuplexErrorFired)
                                    {
                                        _TxErrorFired = true;
                                        General.SafeLaunchEvent(RdPosPttStateEngine, this, new RangeMsg<PttState>(p.Key.Id, (PttState)(-1)));
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                _Logger.Error("ERROR generando timer Ptt", ex);
            }
        }

        //Timer Error Portadora
        private void _HalfDuplexTimer_Tick(object sender, EventArgs e)
        {
            try
            {
                if (_HalfDuplexTimer.Enabled)
                {
                    var otra = new Dictionary<UrrRdButton, RdDst>(_PttPushedList);
                    foreach (KeyValuePair<UrrRdButton, RdDst> p in otra)
                    {
                        if (p.Value.Ptt == PttState.PttOnlyPort && p.Value.Squelch == SquelchState.NoSquelch)
                        {
                            if (!_TxErrorFired)
                            {
                                _HalfDuplexErrorFired = true;
                                General.SafeLaunchEvent(RdPosPttStateEngine, this, new RangeMsg<PttState>(p.Key.Id, PttState.Error));
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                _Logger.Error("ERROR generando timer Ptt", ex);
            }
        }
        //Error retransmisión RTX
        private void _RtxErrorTimer_Tick(object sender, EventArgs e)
        {
            bool thereIsGroup = false;
            int noSquelchCount = 0;
            try
            {
                if (_RtxErrorTimer.Enabled)
                {
                    var otra = new Dictionary<UrrRdButton, RdDst>(_PttPushedList);
                    foreach (KeyValuePair<UrrRdButton, RdDst> p in otra)
                    {
                        if (p.Value.Squelch == SquelchState.NoSquelch)
                            noSquelchCount++;
                    }

                    if (noSquelchCount != _PttPushedList.Count)
                    {
                        foreach (KeyValuePair<UrrRdButton, RdDst> p in otra)
                        {
                            if (p.Value.RtxGroup == 1)
                            {
                                thereIsGroup = true;
                                if (p.Value.Squelch != SquelchState.NoSquelch)
                                    _RtxErrorActivated = true;
                                if (_RtxErrorActivated && p.Value.Squelch == SquelchState.NoSquelch)
                                    p.Key.setRtxErrorColor();
                            }
                        }
                        if (!thereIsGroup)
                            _RtxErrorTimer.Enabled = false;
                    }
                }
            }
            catch (Exception ex)
            {
                _Logger.Error("ERROR generando timer error Rtx", ex);
            }
        }

        private void RadioView_BackColorChanged(object sender, EventArgs e)
        {
            Invalidate(true);
        }

        /*private void _UrrDownPageBT_DownClick(object sender)
        {
            int actualPage = _urrRdPageButton.Page;

            try
            {
                _CmdManager.RdLoadPrevPage(actualPage, _NumPositionsByPage);
            }
            catch (Exception ex)
            {
                string msg = string.Format("ERROR solicitando pagina RD previa [Actual={0}]", actualPage);
                _Logger.Error(msg, ex);
            }
        }
        */
        private void _UrrUpPageBT_Click(object sender, EventArgs e)
        {
            int actualPage = _urrRdPageButton.Page;
            try
            {
                _CmdManager.RdLoadNextPage(actualPage, _NumPositionsByPage);
            }
            catch (Exception ex)
            {
                string msg = string.Format("ERROR solicitando pagina RD siguiente [Actual={0}]", actualPage);
                _Logger.Error(msg, ex);
            }
        }
        private void _UrrDownPageBT_Click(object sender, EventArgs e)
        {
            int actualPage = _urrRdPageButton.Page;
            try
            {
                _CmdManager.RdLoadPrevPage(actualPage, _NumPositionsByPage);
            }
            catch (Exception ex)
            {
                string msg = string.Format("ERROR solicitando pagina RD anterior [Actual={0}]", actualPage);
                _Logger.Error(msg, ex);
            }
        }
    }
}

