//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add Business Module" recipe.
//
// The Module class derives from the CAB base class ModuleInit and it will be instantiated
// when the module is loaded by the CAB infrastructure.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.scsf.2007may/SCSF/html/02-08-060-Add_Business_Module_Next_Steps.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System.Drawing;
using Microsoft.Practices.CompositeUI;
using Microsoft.Practices.ObjectBuilder;
using HMI.Infrastructure.Interface;
using HMI.Infrastructure.Library.UI;
using HMI.Model.Module.UI;
using HMI.Presentation.AUrr.Layout;
using HMI.Presentation.AUrr.Constants;
using HMI.Presentation.AUrr.Properties;

using System.Threading;
using System.Globalization;

namespace HMI.Presentation.AUrr
{
    public class Module : ModuleInit
    {
        private WorkItem _rootWorkItem;

        [InjectionConstructor]
        public Module([ServiceDependency] WorkItem rootWorkItem)
        {
            _rootWorkItem = rootWorkItem;

            Properties.Settings stts = Presentation.AUrr.Properties.Settings.Default;

            VisualStyle.UseModernStyle = stts.ThemeUseModernStyle;
            VisualStyle.UnknownScv = stts.ThemeUnknownScv;
            VisualStyle.ScvA = stts.ThemeScvA;
            VisualStyle.ScvB = stts.ThemeScvB;
            VisualStyle.InnerBorderColorDisabled = stts.ThemeInnerBorderColorDisabled;
            VisualStyle.InnerBorderColorNormal = stts.ThemeInnerBorderColorNormal;
            VisualStyle.InnerBorderColorMouseOver = stts.ThemeInnerBorderColorMouseOver;
            VisualStyle.InnerBorderColorPushed = stts.ThemeInnerBorderColorPushed;
            VisualStyle.ButtonColor = stts.ThemeButtonColor;
            VisualStyle.ButtonColorDisabled = stts.ThemeButtonColorDisabled;
            VisualStyle.BorderColor = stts.ThemeBorderColor;
            VisualStyle.BorderColorDisabled = stts.ThemeBorderColorDisabled;
            VisualStyle.ButtonCornerRadius = stts.ThemeButtonCornerRadius;
        }

        public override void Load()
        {

            base.Load();

            // Add layout view to the shell
            ShellLayoutView _shellLayout = _rootWorkItem.Items.AddNew<ShellLayoutView>();
            _rootWorkItem.Workspaces[WorkspaceNames.LayoutWorkspace].Show(_shellLayout);

            // Add window workspace to be used for modal windows
            WindowWorkspace wsp = new WindowWorkspace(_shellLayout.ParentForm);
            _rootWorkItem.Workspaces.Add(wsp, WorkspaceNames.ModalWindows);

            // Add window workspace to be used for screen saver
            WindowWorkspace scrSaver = new WindowWorkspace(_shellLayout.ParentForm);
            _rootWorkItem.Workspaces.Add(scrSaver, WorkspaceNames.ScreenSaverWindow);

            ControlledWorkItem<ModuleController> workItem = _rootWorkItem.WorkItems.AddNew<ControlledWorkItem<ModuleController>>();
            workItem.Controller.Run();
        }
    }
}
