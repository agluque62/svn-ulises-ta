// #define _AUDIOGENERIC_
//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by this guidance package as part of the solution template
//
// The FormShell class represent the main form of your application.
// 
// For more information see: 
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.scsf.2007may/SCSF/html/03-01-010-How_to_Create_Smart_Client_Solutions.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------
using System;
using System.Windows.Forms;
using HMI.Infrastructure.Interface.Constants;

#if _AUDIOGENERIC_
using System.Reflection;
using System.Runtime.InteropServices;
using System.Diagnostics;
using NLog;
#endif

namespace HMI.Infrastructure.Shell
{
    /// <summary>
    /// Main application shell view.
    /// </summary>
    public partial class ShellForm : Form
    {

        /// <summary>
        /// Default class initializer.
        /// </summary>
        public ShellForm()
        {
            InitializeComponent();
            _layoutWorkspace.Name = WorkspaceNames.LayoutWorkspace;
#if _AUDIOGENERIC_

            // UsbNotification.RegisterUsbDeviceNotification(this.Handle, UsbNotification.GuidDevinterfaceUSBDevice);
            UsbNotification.RegisterUsbDeviceNotification(this.Handle, UsbNotification.GuidDevinterfaceAudioDevice);
#endif
        }

#if _AUDIOGENERIC_
        internal static class UsbNotification
        {
            public const int DbtDevicearrival = 0x8000;             // system detected a new device        
            public const int DbtDeviceremovecomplete = 0x8004;      // device is gone      
            public const int WmDevicechange = 0x0219;               // device change event      
            public static readonly Guid GuidDevinterfaceUSBDevice = new Guid("A5DCBF10-6530-11D2-901F-00C04FB951ED");   // USB Raw Devices
            public static readonly Guid GuidDevinterfaceHIDDevice = new Guid("4d1e55b2-f16f-11cf-88cb-001111000030");   // Human Interface Device (HID)
            public static readonly Guid GuidDevinterfaceAudioDevice = new Guid("6994AD04-93EF-11D0-A3CC-00A0C9223196"); // KSCATEGORY_AUDIO Media (Audio) Interface Device...
            private const int DbtDevtypDeviceinterface = 5;
            private static IntPtr notificationHandle;

            /// <summary>
            /// Registers a window to receive notifications when USB devices are plugged or unplugged.
            /// </summary>
            /// <param name="windowHandle">Handle to the window receiving notifications.</param>
            public static void RegisterUsbDeviceNotification(IntPtr windowHandle, Guid interfaz)
            {
                DevBroadcastDeviceinterface dbi = new DevBroadcastDeviceinterface
                {
                    DeviceType = DbtDevtypDeviceinterface,
                    Reserved = 0,
                    ClassGuid = interfaz,   // GuidDevinterfaceUSBDevice,
                    Name = 0
                };

                dbi.Size = Marshal.SizeOf(dbi);
                IntPtr buffer = Marshal.AllocHGlobal(dbi.Size);
                Marshal.StructureToPtr(dbi, buffer, true);
                notificationHandle = RegisterDeviceNotification(windowHandle, buffer, 0);
            }

            /// <summary>
            /// Unregisters the window for USB device notifications
            /// </summary>
            public static void UnregisterUsbDeviceNotification()
            {
                UnregisterDeviceNotification(notificationHandle);
            }

            /// <summary>
            /// 
            /// </summary>
            /// <param name="LParam"></param>
            /// <returns></returns>
            public static bool NameAndClass(IntPtr LParam, ref String name)
            {
                DEV_BROADCAST_DEVICEINTERFACE_1 devBroadcastDeviceInterface = new DEV_BROADCAST_DEVICEINTERFACE_1();
                DEV_BROADCAST_HDR devBroadcastHeader = new DEV_BROADCAST_HDR();

                Marshal.PtrToStructure(LParam, devBroadcastHeader);
                if ((devBroadcastHeader.dbch_devicetype == DbtDevtypDeviceinterface))
                {
                    Int32 stringSize = Convert.ToInt32((devBroadcastHeader.dbch_size - 32) / 2);

                    Array.Resize(ref devBroadcastDeviceInterface.dbcc_name, stringSize);
                    Marshal.PtrToStructure(LParam, devBroadcastDeviceInterface);
                    name = new String(devBroadcastDeviceInterface.dbcc_name, 0, stringSize);
                    name = FriendlyName(name);
                    return true;
                }
                return false;
            }

            /// <summary>
            /// 
            /// </summary>
            /// <param name="dev_name"></param>
            /// <returns></returns>
            public static string FriendlyName(string dev_name)
            {
                string[] parts = dev_name.Split('#');
                string reg_key = "HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Enum\\USB\\" + parts[1] + "\\" + parts[2];
                return Microsoft.Win32.Registry.GetValue(reg_key,"FriendlyName","No Encontrado").ToString();
            }

            [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
            private static extern IntPtr RegisterDeviceNotification(IntPtr recipient, IntPtr notificationFilter, int flags);

            [DllImport("user32.dll")]
            private static extern bool UnregisterDeviceNotification(IntPtr handle);

            [StructLayout(LayoutKind.Sequential)]
            private struct DevBroadcastDeviceinterface
            {
                internal int Size;
                internal int DeviceType;
                internal int Reserved;
                internal Guid ClassGuid;
                internal short Name;
            }
            [StructLayout(LayoutKind.Sequential)]
            internal class DEV_BROADCAST_HDR
            {
                internal int dbch_size;
                internal int dbch_devicetype;
                internal int dbch_reserved;
            }

            [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Auto)]
            internal class DEV_BROADCAST_DEVICEINTERFACE_1
            {
                internal Int32 dbcc_size;
                internal Int32 dbcc_devicetype;
                internal Int32 dbcc_reserved;
                [MarshalAs(UnmanagedType.ByValArray, ArraySubType = UnmanagedType.U1, SizeConst = 16)]
                internal Char[] dbcc_classguid;
                [MarshalAs(UnmanagedType.ByValArray, SizeConst = 255)]
                internal Char[] dbcc_name;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="m"></param>
        protected override void WndProc(ref Message m)
        {
            if (m.Msg == UsbNotification.WmDevicechange)
            {
                String Nombre="";
                switch ((int)m.WParam)
                {
                    case UsbNotification.DbtDeviceremovecomplete:
                        if (UsbNotification.NameAndClass(m.LParam, ref Nombre) == true)
                        {
                            AudioDeviceEvent(Nombre, false);
                            LogManager.GetCurrentClassLogger().Info("WM_DEVICECHANGE <DBT_DEVICEREMOVECOMPLETE>: {0}", Nombre); // this is where you do your magic
                        }
                        break;

                    case UsbNotification.DbtDevicearrival:
                        if (UsbNotification.NameAndClass(m.LParam, ref Nombre) == true)
                        {
                            AudioDeviceEvent(Nombre, true);
                            LogManager.GetCurrentClassLogger().Info("WM_DEVICECHANGE <DBT_DEVICEARRIVAL>: {0}", Nombre);        // this is where you do your magic
                        }
                        break;

                    default:
                        LogManager.GetCurrentClassLogger().Info("WM_DEVICECHANGE WParam={0}, LParam={1}", m.WParam.ToInt32(), m.LParam.ToInt32());
                        break;
                }
            }

            base.WndProc(ref m);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="audio_device"></param>
        /// <param name="OnOff"></param>
        protected void AudioDeviceEvent(string audio_device, bool OnOff)
        {
            try
            {
                //var MainToolWs = _layoutWorkspace.ActiveSmartPart.GetType().GetProperty("MainToolsWS").GetValue(_layoutWorkspace.ActiveSmartPart, null);
                //var HeaderView = MainToolWs.GetType().GetProperty("ActiveSmartPart").GetValue(MainToolWs, null);
                //var CmdManager = HeaderView.GetType().GetProperty("CmdManager").GetValue(HeaderView, null);

                //MethodInfo funcion = CmdManager.GetType().GetMethod("AudioEvent");
                //object[] parametersArray = new object[] { audio_device, OnOff };
                //funcion.Invoke(CmdManager, parametersArray);
                switch (MessageBox.Show("Se ha detectado un cambio en la configuracion de disposivos de audio.\n" +
                    "\tSI: Reiniciar Aplicacion.\n" +
                    "\tNO: Salir.", "Pregunta", MessageBoxButtons.YesNo))
                {
                    case DialogResult.Yes:
                        Process.Start("Launcher.exe", "HMI.exe");
                        break;
                    case DialogResult.No:
                        Application.Exit();
                        break;
                }
            }
            catch (Exception /*x*/)
            {
            }
        }
#endif
    }
}
