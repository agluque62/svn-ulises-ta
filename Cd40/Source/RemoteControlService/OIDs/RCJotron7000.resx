<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CarrierOffStatus" xml:space="preserve">
    <value>1.3.6.1.4.1.22154.3.1.2.3.6.0</value>
    <comment>bsClimaxOffs

Set the offset frequency of the radio in the predefined steps:
1 = -8kHz 
2 = -7kHz 
3 = -7kHz 
4 = -5kHz 
5 = -4kHz 
6 = -2kHz 
7 = off
8 = +2.5 kHz
9 = +4.0 kHz 
10 = +5.0 kHz 
11 = +7.3 kHz 
12 = +7.5 kHz 
13 = +8.0 kHz</comment>
  </data>
  <data name="ChannelSpacing" xml:space="preserve">
    <value>1.3.6.1.4.1.22154.3.1.2.3.23.0</value>
    <comment>bsIFbandwidth.                                                                     1 Set the bandwidth to  8.33 kHz .                                     2 Set the bandwidth to  25.0 kHz.
</comment>
  </data>
  <data name="DeviceStatus" xml:space="preserve">
    <value>1.3.6.1.4.1.22154.3.1.2.3.2.0</value>
    <comment>bsOperState

Get the operational state of the radio (BITS)
keyInp(0)		There is an active key input to the radio (tx) or the txBusy input is low (rx)
forcedptt(1)	The radio is forced to the key (ptt) state by a software command
rxSqtxKeyConf(2)The squelch on the radio is open(Rx). KeyConf is a confirmation signal that the PA internal to the transmitter is keyed.
forcedsqopen(3)	The squelch is forced open (always) (rx only) by a software command
alarm(4)		The radio is in alarm state
forcedalarm(5)	The radio is forced to the alarm state by a software command
standby(6)		The radio is in standby state
forcedstandby(7)	The radio is forced into standby state by a software command
lowpower(8)		The radio is in lowpower state
forcedlowpower(9)	The radio is forced into lowpower state by a software command
forcedmute(10)	The radio is forced into mute state(rx only) by a software command
alert(11)		The radio is in alert state (ICU :unAckAlarm)
fail(12)		The radio is in fail state (ICU :unAckPinAlarm)
rs232CommActive(13)	The radio has processed commands on the rs232 interface (5sec timeout)
ac(14)			The radio is operated from AC power
rxScttxTimeout(15)	The radio indicates possible Simultaneous Call detection on RX and TX in timeout for TX
selectIn(16)	The select input signal is active
voipstreamInTimeout(17) The radio has one ore more voip streams in timeout
telsaBusy(18)	The radio has enabled Telsa filter, and Telsafilter is not ready/cmd not present</comment>
  </data>
  <data name="Frecuency" xml:space="preserve">
    <value>1.3.6.1.4.1.22154.3.1.2.3.4.0</value>
    <comment>bsFrequencyICAO

Set the operation frequency of the radio in 'ICAO' channels
ie. 127000 127005 127010 127015 127025 etc.
units: kHz</comment>
  </data>
  <data name="InServiceMode" xml:space="preserve">
    <value>1.3.6.1.4.1.22154.3.1.2.3.21.0</value>
    <comment>bsInServiceMode true(1) false(2) </comment>
  </data>
  <data name="Modulation" xml:space="preserve">
    <value>1.3.6.1.4.1.22154.3.1.2.3.9.0</value>
    <comment>bsModulation Jotron

Provides a way to get or set the current mode (AM/ACARS/…).

1 = AM
2 = AMMSK
3 = VDL2
4 = FM
5 = DSC</comment>
  </data>
  <data name="OperationalMode" xml:space="preserve">
    <value>1.3.6.1.4.1.22154.3.1.2.3.1.0</value>
    <comment>bsOperMode. reset = 1, main = 2, norm = 3, off = 4, test ( not used)</comment>
  </data>
  <data name="OperationalStatusATC" xml:space="preserve">
    <value>1.3.6.1.4.1.2363.6.1.1.6.0</value>
    <comment>grOpStat  (EUROCONTROL-ATCRADIO-MIB)        String contains : Num Param, StatGoNoGo (0=NoGo, 1=Go), EventLevel (0=Ok, 1=Warning, 2=Error) </comment>
  </data>
  <data name="RequestFrecuency" xml:space="preserve">
    <value>1.3.6.1.4.1.22154.3.1.2.3.3.0</value>
    <comment>Get the operation frequency of the radio in Hz.
Unit:Hz</comment>
  </data>
  <data name="TxAnaModSource" xml:space="preserve">
    <value>1.3.6.1.4.1.22154.3.1.2.2.1.2.2.0</value>
    <comment>Defines the analog modulation input source. Auto(1), Line In(2), Mic(3), ModGen(4), Voip(5).</comment>
  </data>
  <data name="TxPowerLevel" xml:space="preserve">
    <value>1.3.6.1.4.1.22154.3.1.2.3.14.0</value>
    <comment>bsForceLowPower true(1) false (2)</comment>
  </data>
</root>